; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sysinit_8xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sysinit_8xx.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.30\BOKRA485\RTE -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\sysinit_8xx.crf lpc_chip_82x\src\sysinit_8xx.c]
                          THUMB

                          AREA ||i.Chip_SetupIrcClocking||, CODE, READONLY, ALIGN=2

                  Chip_SetupIrcClocking PROC
;;;87     /* Set up and initialize hardware prior to call to main */
;;;88     void Chip_SetupIrcClocking(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90     	Chip_IRC_SetFreq(CONFIG_MAIN_FREQ, CONFIG_SYS_FREQ);
000002  4902              LDR      r1,|L1.12|
000004  0048              LSLS     r0,r1,#1
000006  f7fffffe          BL       Chip_IRC_SetFreq
;;;91     }
00000a  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  |L1.12|
                          DCD      0x01c9c380

                          AREA ||i.Chip_SetupXtalClocking||, CODE, READONLY, ALIGN=2

                  Chip_SetupXtalClocking PROC
;;;52     /* Setup system clocking */
;;;53     void Chip_SetupXtalClocking(void)
000000  b510              PUSH     {r4,lr}
;;;54     {
;;;55     	/* EXT oscillator < 15MHz */
;;;56     	Chip_Clock_SetPLLBypass(false, false);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       Chip_Clock_SetPLLBypass
;;;57     
;;;58     	/* Turn on the SYSOSC by clearing the power down bit */
;;;59     	Chip_SYSCTL_PowerUp(SYSCTL_SLPWAKE_SYSOSC_PD);
00000a  2020              MOVS     r0,#0x20
00000c  f7fffffe          BL       Chip_SYSCTL_PowerUp
;;;60     
;;;61     	/* Select the PLL input to the external oscillator */
;;;62     	Chip_Clock_SetSystemPLLSource(SYSCTL_PLLCLKSRC_SYSOSC);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       Chip_Clock_SetSystemPLLSource
;;;63     
;;;64     	/* Setup FLASH access to 2 clocks (up to 30MHz) */
;;;65     	Chip_FMC_SetFLASHAccess(FLASHTIM_30MHZ_CPU);
000016  2001              MOVS     r0,#1
000018  4a12              LDR      r2,|L2.100|
00001a  6912              LDR      r2,[r2,#0x10]
00001c  2100              MOVS     r1,#0
00001e  460a              MOV      r2,r1
000020  4302              ORRS     r2,r2,r0
000022  4b10              LDR      r3,|L2.100|
000024  611a              STR      r2,[r3,#0x10]
000026  bf00              NOP      
;;;66     
;;;67     	/* Power down PLL to change the PLL divider ratio */
;;;68     	Chip_SYSCTL_PowerDown(SYSCTL_SLPWAKE_SYSPLL_PD);
000028  2080              MOVS     r0,#0x80
00002a  f7fffffe          BL       Chip_SYSCTL_PowerDown
;;;69     
;;;70     	/* Configure the PLL M and P dividers */
;;;71     	/* Setup PLL for main oscillator rate ((FCLKIN = 12MHz) * 5)/2 = 30MHz */
;;;72     	Chip_Clock_SetupSystemPLL(4, 1);
00002e  2004              MOVS     r0,#4
000030  2101              MOVS     r1,#1
000032  014a              LSLS     r2,r1,#5
000034  4302              ORRS     r2,r2,r0
000036  4b0c              LDR      r3,|L2.104|
000038  609a              STR      r2,[r3,#8]
00003a  bf00              NOP      
;;;73     
;;;74     	/* Turn on the PLL by clearing the power down bit */
;;;75     	Chip_SYSCTL_PowerUp(SYSCTL_SLPWAKE_SYSPLL_PD);
00003c  2080              MOVS     r0,#0x80
00003e  f7fffffe          BL       Chip_SYSCTL_PowerUp
;;;76     
;;;77     	/* Wait for PLL to lock */
;;;78     	while (!Chip_Clock_IsSystemPLLLocked()) {}
000042  bf00              NOP      
                  |L2.68|
000044  bf00              NOP      
000046  4808              LDR      r0,|L2.104|
000048  68c0              LDR      r0,[r0,#0xc]
00004a  07c0              LSLS     r0,r0,#31
00004c  0fc0              LSRS     r0,r0,#31
00004e  2800              CMP      r0,#0
000050  d0f8              BEQ      |L2.68|
;;;79     
;;;80     	Chip_Clock_SetSysClockDiv(2);
000052  2002              MOVS     r0,#2
000054  4904              LDR      r1,|L2.104|
000056  3140              ADDS     r1,r1,#0x40
000058  6388              STR      r0,[r1,#0x38]
00005a  bf00              NOP      
;;;81     
;;;82     	/* Set main clock source to the system PLL. This will drive 24MHz
;;;83     	   for the main clock and 24MHz for the system clock */
;;;84     	Chip_Clock_SetMainClockSource(SYSCTL_MAINCLKSRC_PLLOUT);
00005c  2003              MOVS     r0,#3
00005e  f7fffffe          BL       Chip_Clock_SetMainClockSource
;;;85     }
000062  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  |L2.100|
                          DCD      0x40040000
                  |L2.104|
                          DCD      0x40048000

                          AREA ||i.Chip_SystemInit||, CODE, READONLY, ALIGN=1

                  Chip_SystemInit PROC
;;;93     /* Set up and initialize hardware prior to call to main */
;;;94     void Chip_SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96     	/* Initial internal clocking */
;;;97     	Chip_SetupIrcClocking();
000002  f7fffffe          BL       Chip_SetupIrcClocking
;;;98     }
000006  bd10              POP      {r4,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "lpc_chip_82x\\src\\sysinit_8xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_sysinit_8xx_c_6d2df287____REV16|
#line 465 ".\\_CMSIS\\v5.20\\Include\\cmsis_armcc.h"
|__asm___13_sysinit_8xx_c_6d2df287____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_sysinit_8xx_c_6d2df287____REVSH|
#line 480
|__asm___13_sysinit_8xx_c_6d2df287____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
