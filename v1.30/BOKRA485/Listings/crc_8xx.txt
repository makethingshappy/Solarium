; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\crc_8xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\crc_8xx.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.30\BOKRA485\RTE -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\crc_8xx.crf lpc_chip_82x\src\crc_8xx.c]
                          THUMB

                          AREA ||i.Chip_CRC_CRC16||, CODE, READONLY, ALIGN=1

                  Chip_CRC_CRC16 PROC
;;;93     /* Convenience function for computing a standard CRC16 checksum from 16-bit data block */
;;;94     uint32_t Chip_CRC_CRC16(const uint16_t *data, uint32_t hwords)
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;96     	Chip_CRC_UseCRC16();
000006  f7fffffe          BL       Chip_CRC_UseCRC16
;;;97     	while (hwords > 0) {
00000a  e006              B        |L1.26|
                  |L1.12|
;;;98     		Chip_CRC_Write16(*data);
00000c  8820              LDRH     r0,[r4,#0]
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  8108              STRH     r0,[r1,#8]
000014  bf00              NOP      
;;;99     		data++;
000016  1ca4              ADDS     r4,r4,#2
;;;100    		hwords--;
000018  1e6d              SUBS     r5,r5,#1
                  |L1.26|
00001a  2d00              CMP      r5,#0                 ;97
00001c  d1f6              BNE      |L1.12|
;;;101    	}
;;;102    
;;;103    	return Chip_CRC_Sum();
00001e  bf00              NOP      
000020  2005              MOVS     r0,#5
000022  0700              LSLS     r0,r0,#28
000024  6880              LDR      r0,[r0,#8]
;;;104    }
000026  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP


                          AREA ||i.Chip_CRC_CRC32||, CODE, READONLY, ALIGN=1

                  Chip_CRC_CRC32 PROC
;;;106    /* Convenience function for computing a standard CRC32 checksum from 32-bit data block */
;;;107    uint32_t Chip_CRC_CRC32(const uint32_t *data, uint32_t words)
000000  b570              PUSH     {r4-r6,lr}
;;;108    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;109    	Chip_CRC_UseCRC32();
000006  f7fffffe          BL       Chip_CRC_UseCRC32
;;;110    	while (words > 0) {
00000a  e006              B        |L2.26|
                  |L2.12|
;;;111    		Chip_CRC_Write32(*data);
00000c  6820              LDR      r0,[r4,#0]
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  6088              STR      r0,[r1,#8]
000014  bf00              NOP      
;;;112    		data++;
000016  1d24              ADDS     r4,r4,#4
;;;113    		words--;
000018  1e6d              SUBS     r5,r5,#1
                  |L2.26|
00001a  2d00              CMP      r5,#0                 ;110
00001c  d1f6              BNE      |L2.12|
;;;114    	}
;;;115    
;;;116    	return Chip_CRC_Sum();
00001e  bf00              NOP      
000020  2005              MOVS     r0,#5
000022  0700              LSLS     r0,r0,#28
000024  6880              LDR      r0,[r0,#8]
;;;117    }
000026  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.Chip_CRC_CRC8||, CODE, READONLY, ALIGN=1

                  Chip_CRC_CRC8 PROC
;;;80     /* configure CRC engine and compute CCITT checksum from 8-bit data */
;;;81     uint32_t Chip_CRC_CRC8(const uint8_t *data, uint32_t bytes)
000000  b570              PUSH     {r4-r6,lr}
;;;82     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;83     	Chip_CRC_UseCCITT();
000006  f7fffffe          BL       Chip_CRC_UseCCITT
;;;84     	while (bytes > 0) {
00000a  e006              B        |L3.26|
                  |L3.12|
;;;85     		Chip_CRC_Write8(*data);
00000c  7820              LDRB     r0,[r4,#0]
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  7208              STRB     r0,[r1,#8]
000014  bf00              NOP      
;;;86     		data++;
000016  1c64              ADDS     r4,r4,#1
;;;87     		bytes--;
000018  1e6d              SUBS     r5,r5,#1
                  |L3.26|
00001a  2d00              CMP      r5,#0                 ;84
00001c  d1f6              BNE      |L3.12|
;;;88     	}
;;;89     
;;;90     	return Chip_CRC_Sum();
00001e  bf00              NOP      
000020  2005              MOVS     r0,#5
000022  0700              LSLS     r0,r0,#28
000024  6880              LDR      r0,[r0,#8]
;;;91     }
000026  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||i.Chip_CRC_Deinit||, CODE, READONLY, ALIGN=2

                  Chip_CRC_Deinit PROC
;;;55     /* De-initialize CRC engine */
;;;56     void Chip_CRC_Deinit(void)
000000  200d              MOVS     r0,#0xd
000002  4905              LDR      r1,|L4.24|
000004  680a              LDR      r2,[r1,#0]
000006  2101              MOVS     r1,#1
000008  4081              LSLS     r1,r1,r0
00000a  4b04              LDR      r3,|L4.28|
00000c  4319              ORRS     r1,r1,r3
00000e  438a              BICS     r2,r2,r1
000010  4901              LDR      r1,|L4.24|
000012  600a              STR      r2,[r1,#0]
000014  bf00              NOP      
;;;57     {
;;;58     	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_CRC);
;;;59     }
000016  4770              BX       lr
;;;60     
                          ENDP

                  |L4.24|
                          DCD      0x40048080
                  |L4.28|
                          DCD      0xda100000

                          AREA ||i.Chip_CRC_Init||, CODE, READONLY, ALIGN=2

                  Chip_CRC_Init PROC
;;;49     /* Initialize CRC engine */
;;;50     void Chip_CRC_Init(void)
000000  200d              MOVS     r0,#0xd
000002  2101              MOVS     r1,#1
000004  4081              LSLS     r1,r1,r0
000006  4a04              LDR      r2,|L5.24|
000008  6812              LDR      r2,[r2,#0]
00000a  4b04              LDR      r3,|L5.28|
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L5.24|
000012  6011              STR      r1,[r2,#0]
000014  bf00              NOP      
;;;51     {
;;;52     	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CRC);
;;;53     }
000016  4770              BX       lr
;;;54     
                          ENDP

                  |L5.24|
                          DCD      0x40048080
                  |L5.28|
                          DCD      0x25efffff

                          AREA ||i.Chip_CRC_UseCCITT||, CODE, READONLY, ALIGN=2

                  Chip_CRC_UseCCITT PROC
;;;139     */
;;;140    STATIC INLINE void Chip_CRC_UseCCITT(void)
000000  2000              MOVS     r0,#0
;;;141    {
;;;142    	LPC_CRC->MODE = MODE_CFG_CCITT;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  6008              STR      r0,[r1,#0]
;;;143    	LPC_CRC->SEED = CRC_SEED_CCITT;
000008  4801              LDR      r0,|L6.16|
00000a  6048              STR      r0,[r1,#4]
;;;144    }
00000c  4770              BX       lr
;;;145    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x0000ffff

                          AREA ||i.Chip_CRC_UseCRC16||, CODE, READONLY, ALIGN=1

                  Chip_CRC_UseCRC16 PROC
;;;119     */
;;;120    STATIC INLINE void Chip_CRC_UseCRC16(void)
000000  2015              MOVS     r0,#0x15
;;;121    {
;;;122    	LPC_CRC->MODE = MODE_CFG_CRC16;
000002  0701              LSLS     r1,r0,#28
000004  6008              STR      r0,[r1,#0]
;;;123    	LPC_CRC->SEED = CRC_SEED_CRC16;
000006  2000              MOVS     r0,#0
000008  6048              STR      r0,[r1,#4]
;;;124    }
00000a  4770              BX       lr
;;;125    
                          ENDP


                          AREA ||i.Chip_CRC_UseCRC32||, CODE, READONLY, ALIGN=1

                  Chip_CRC_UseCRC32 PROC
;;;129     */
;;;130    STATIC INLINE void Chip_CRC_UseCRC32(void)
000000  2036              MOVS     r0,#0x36
;;;131    {
;;;132    	LPC_CRC->MODE = MODE_CFG_CRC32;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  6008              STR      r0,[r1,#0]
;;;133    	LPC_CRC->SEED = CRC_SEED_CRC32;
000008  2000              MOVS     r0,#0
00000a  43c0              MVNS     r0,r0
00000c  6048              STR      r0,[r1,#4]
;;;134    }
00000e  4770              BX       lr
;;;135    
                          ENDP


                          AREA ||i.Chip_CRC_UseDefaultConfig||, CODE, READONLY, ALIGN=1

                  Chip_CRC_UseDefaultConfig PROC
;;;61     /* Sets up the CRC engine with defaults based on the polynomial to be used */
;;;62     void Chip_CRC_UseDefaultConfig(CRC_POLY_T poly)
000000  b510              PUSH     {r4,lr}
;;;63     {
000002  4604              MOV      r4,r0
;;;64     	switch (poly) {
000004  2c00              CMP      r4,#0
000006  d00b              BEQ      |L9.32|
000008  2c01              CMP      r4,#1
00000a  d002              BEQ      |L9.18|
00000c  2c02              CMP      r4,#2
00000e  d106              BNE      |L9.30|
000010  e002              B        |L9.24|
                  |L9.18|
;;;65     	case CRC_POLY_CRC16:
;;;66     		Chip_CRC_UseCRC16();
000012  f7fffffe          BL       Chip_CRC_UseCRC16
;;;67     		break;
000016  e006              B        |L9.38|
                  |L9.24|
;;;68     
;;;69     	case CRC_POLY_CRC32:
;;;70     		Chip_CRC_UseCRC32();
000018  f7fffffe          BL       Chip_CRC_UseCRC32
;;;71     		break;
00001c  e003              B        |L9.38|
                  |L9.30|
;;;72     
;;;73     	case CRC_POLY_CCITT:
00001e  bf00              NOP      
                  |L9.32|
;;;74     	default:
;;;75     		Chip_CRC_UseCCITT();
000020  f7fffffe          BL       Chip_CRC_UseCCITT
;;;76     		break;
000024  bf00              NOP      
                  |L9.38|
000026  bf00              NOP                            ;67
;;;77     	}
;;;78     }
000028  bd10              POP      {r4,pc}
;;;79     
                          ENDP


;*** Start embedded assembler ***

#line 1 "lpc_chip_82x\\src\\crc_8xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_crc_8xx_c_36838b8d____REV16|
#line 465 ".\\_CMSIS\\v5.20\\Include\\cmsis_armcc.h"
|__asm___9_crc_8xx_c_36838b8d____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_crc_8xx_c_36838b8d____REVSH|
#line 480
|__asm___9_crc_8xx_c_36838b8d____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
