; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sct_8xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sct_8xx.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.30\BOKRA485\RTE -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\sct_8xx.crf lpc_chip_82x\src\sct_8xx.c]
                          THUMB

                          AREA ||i.Chip_SCT_DeInit||, CODE, READONLY, ALIGN=2

                  Chip_SCT_DeInit PROC
;;;57     /* Shutdown SCT */
;;;58     void Chip_SCT_DeInit(LPC_SCT_T *pSCT)
000000  b510              PUSH     {r4,lr}
;;;59     {
000002  4602              MOV      r2,r0
;;;60     	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_SCT);
000004  2008              MOVS     r0,#8
000006  4905              LDR      r1,|L1.28|
000008  680b              LDR      r3,[r1,#0]
00000a  2101              MOVS     r1,#1
00000c  4081              LSLS     r1,r1,r0
00000e  4c04              LDR      r4,|L1.32|
000010  4321              ORRS     r1,r1,r4
000012  438b              BICS     r3,r3,r1
000014  4901              LDR      r1,|L1.28|
000016  600b              STR      r3,[r1,#0]
000018  bf00              NOP      
;;;61     }
00001a  bd10              POP      {r4,pc}
;;;62     
                          ENDP

                  |L1.28|
                          DCD      0x40048080
                  |L1.32|
                          DCD      0xda100000

                          AREA ||i.Chip_SCT_Init||, CODE, READONLY, ALIGN=2

                  Chip_SCT_Init PROC
;;;50     /* Initialize SCT */
;;;51     void Chip_SCT_Init(LPC_SCT_T *pSCT)
000000  b510              PUSH     {r4,lr}
;;;52     {
000002  4601              MOV      r1,r0
;;;53     	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_SCT);
000004  2008              MOVS     r0,#8
000006  2201              MOVS     r2,#1
000008  4082              LSLS     r2,r2,r0
00000a  4b12              LDR      r3,|L2.84|
00000c  681b              LDR      r3,[r3,#0]
00000e  4c12              LDR      r4,|L2.88|
000010  4023              ANDS     r3,r3,r4
000012  431a              ORRS     r2,r2,r3
000014  4b0f              LDR      r3,|L2.84|
000016  601a              STR      r2,[r3,#0]
000018  bf00              NOP      
;;;54     	Chip_SYSCTL_PeriphReset(RESET_SCT);
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  4a0d              LDR      r2,|L2.84|
000020  3a80              SUBS     r2,r2,#0x80
000022  6853              LDR      r3,[r2,#4]
000024  2201              MOVS     r2,#1
000026  4082              LSLS     r2,r2,r0
000028  4c0c              LDR      r4,|L2.92|
00002a  4322              ORRS     r2,r2,r4
00002c  4393              BICS     r3,r3,r2
00002e  4a09              LDR      r2,|L2.84|
000030  3a80              SUBS     r2,r2,#0x80
000032  6053              STR      r3,[r2,#4]
000034  bf00              NOP      
000036  bf00              NOP      
000038  2201              MOVS     r2,#1
00003a  4082              LSLS     r2,r2,r0
00003c  4b05              LDR      r3,|L2.84|
00003e  3b80              SUBS     r3,r3,#0x80
000040  685b              LDR      r3,[r3,#4]
000042  43e4              MVNS     r4,r4
000044  4023              ANDS     r3,r3,r4
000046  431a              ORRS     r2,r2,r3
000048  4b02              LDR      r3,|L2.84|
00004a  3b80              SUBS     r3,r3,#0x80
00004c  605a              STR      r2,[r3,#4]
00004e  bf00              NOP      
000050  bf00              NOP      
;;;55     }
000052  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  |L2.84|
                          DCD      0x40048080
                  |L2.88|
                          DCD      0x25efffff
                  |L2.92|
                          DCD      0xfffe2000

                          AREA ||i.Chip_SCT_SetClrControl||, CODE, READONLY, ALIGN=2

                  Chip_SCT_SetClrControl PROC
;;;63     /* Set/Clear SCT control register */
;;;64     void Chip_SCT_SetClrControl(LPC_SCT_T *pSCT, uint32_t value, FunctionalState ena)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66     	if (ena == ENABLE) {
000002  2a01              CMP      r2,#1
000004  d107              BNE      |L3.22|
;;;67     		Chip_SCT_SetControl(pSCT, value);
000006  bf00              NOP      
000008  6843              LDR      r3,[r0,#4]
00000a  4c08              LDR      r4,|L3.44|
00000c  4023              ANDS     r3,r3,r4
00000e  430b              ORRS     r3,r3,r1
000010  6043              STR      r3,[r0,#4]
000012  bf00              NOP      
000014  e008              B        |L3.40|
                  |L3.22|
;;;68     	}
;;;69     	else {
;;;70     		Chip_SCT_ClearControl(pSCT, value);
000016  bf00              NOP      
000018  6843              LDR      r3,[r0,#4]
00001a  4c04              LDR      r4,|L3.44|
00001c  43e4              MVNS     r4,r4
00001e  430c              ORRS     r4,r4,r1
000020  43a3              BICS     r3,r3,r4
000022  6043              STR      r3,[r0,#4]
000024  bf00              NOP      
000026  bf00              NOP      
                  |L3.40|
;;;71     	}
;;;72     }
000028  bd10              POP      {r4,pc}
;;;73     
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      0x1fff1fff

                          AREA ||i.Chip_SCT_SetConflictResolution||, CODE, READONLY, ALIGN=1

                  Chip_SCT_SetConflictResolution PROC
;;;74     /* Set Conflict resolution */
;;;75     void Chip_SCT_SetConflictResolution(LPC_SCT_T *pSCT, uint8_t outnum, uint8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
;;;77     	uint32_t tem;
;;;78     	
;;;79     	tem = pSCT->RES & ~((0x03 << (2 * outnum))|SCT_RES_RESERVED);
000002  6d85              LDR      r5,[r0,#0x58]
000004  004e              LSLS     r6,r1,#1
000006  2403              MOVS     r4,#3
000008  40b4              LSLS     r4,r4,r6
00000a  26ff              MOVS     r6,#0xff
00000c  43f6              MVNS     r6,r6
00000e  4334              ORRS     r4,r4,r6
000010  43a5              BICS     r5,r5,r4
000012  462b              MOV      r3,r5
;;;80     	pSCT->RES = tem | (value << (2 * outnum));
000014  004d              LSLS     r5,r1,#1
000016  4614              MOV      r4,r2
000018  40ac              LSLS     r4,r4,r5
00001a  431c              ORRS     r4,r4,r3
00001c  6584              STR      r4,[r0,#0x58]
;;;81     }
00001e  bd70              POP      {r4-r6,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "lpc_chip_82x\\src\\sct_8xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_sct_8xx_c_95421fff____REV16|
#line 465 ".\\_CMSIS\\v5.20\\Include\\cmsis_armcc.h"
|__asm___9_sct_8xx_c_95421fff____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_sct_8xx_c_95421fff____REVSH|
#line 480
|__asm___9_sct_8xx_c_95421fff____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
