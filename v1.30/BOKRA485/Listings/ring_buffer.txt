; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\ring_buffer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ring_buffer.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.30\BOKRA485\RTE -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\ring_buffer.crf lpc_chip_82x\src\ring_buffer.c]
                          THUMB

                          AREA ||i.RingBuffer_GetCount||, CODE, READONLY, ALIGN=1

                  RingBuffer_GetCount PROC
;;;102     */
;;;103    STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
000000  4601              MOV      r1,r0
;;;104    {
;;;105    	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
000002  68c8              LDR      r0,[r1,#0xc]
000004  690a              LDR      r2,[r1,#0x10]
000006  1a80              SUBS     r0,r0,r2
;;;106    }
000008  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||i.RingBuffer_Init||, CODE, READONLY, ALIGN=1

                  RingBuffer_Init PROC
;;;54     /* Initialize ring buffer */
;;;55     int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
000000  b510              PUSH     {r4,lr}
;;;56     {
000002  4604              MOV      r4,r0
;;;57     	RingBuff->data = buffer;
000004  6021              STR      r1,[r4,#0]
;;;58     	RingBuff->count = count;
000006  6063              STR      r3,[r4,#4]
;;;59     	RingBuff->itemSz = itemSize;
000008  60a2              STR      r2,[r4,#8]
;;;60     	RingBuff->head = RingBuff->tail = 0;
00000a  2000              MOVS     r0,#0
00000c  6120              STR      r0,[r4,#0x10]
00000e  60e0              STR      r0,[r4,#0xc]
;;;61     
;;;62     	return 1;
000010  2001              MOVS     r0,#1
;;;63     }
000012  bd10              POP      {r4,pc}
;;;64     
                          ENDP


                          AREA ||i.RingBuffer_Insert||, CODE, READONLY, ALIGN=1

                  RingBuffer_Insert PROC
;;;65     /* Insert a single item into Ring Buffer */
;;;66     int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
000000  b570              PUSH     {r4-r6,lr}
;;;67     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;68     	uint8_t *ptr = RingBuff->data;
000006  6825              LDR      r5,[r4,#0]
;;;69     
;;;70     	/* We cannot insert when queue is full */
;;;71     	if (RingBuffer_IsFull(RingBuff))
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       RingBuffer_IsFull
00000e  2800              CMP      r0,#0
000010  d001              BEQ      |L3.22|
;;;72     		return 0;
000012  2000              MOVS     r0,#0
                  |L3.20|
;;;73     
;;;74     	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
;;;75     	memcpy(ptr, data, RingBuff->itemSz);
;;;76     	RingBuff->head++;
;;;77     
;;;78     	return 1;
;;;79     }
000014  bd70              POP      {r4-r6,pc}
                  |L3.22|
000016  6861              LDR      r1,[r4,#4]            ;74
000018  1e49              SUBS     r1,r1,#1              ;74
00001a  68e0              LDR      r0,[r4,#0xc]          ;74
00001c  4008              ANDS     r0,r0,r1              ;74
00001e  68a1              LDR      r1,[r4,#8]            ;74
000020  4348              MULS     r0,r1,r0              ;74
000022  1945              ADDS     r5,r0,r5              ;74
000024  4631              MOV      r1,r6                 ;75
000026  4628              MOV      r0,r5                 ;75
000028  68a2              LDR      r2,[r4,#8]            ;75
00002a  f7fffffe          BL       __aeabi_memcpy
00002e  68e0              LDR      r0,[r4,#0xc]          ;76
000030  1c40              ADDS     r0,r0,#1              ;76
000032  60e0              STR      r0,[r4,#0xc]          ;76
000034  2001              MOVS     r0,#1                 ;78
000036  e7ed              B        |L3.20|
;;;80     
                          ENDP


                          AREA ||i.RingBuffer_InsertMult||, CODE, READONLY, ALIGN=1

                  RingBuffer_InsertMult PROC
;;;81     /* Insert multiple items into Ring Buffer */
;;;82     int RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;83     {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
000006  4617              MOV      r7,r2
;;;84     	uint8_t *ptr = RingBuff->data;
000008  6820              LDR      r0,[r4,#0]
00000a  9001              STR      r0,[sp,#4]
;;;85     	int cnt1, cnt2;
;;;86     
;;;87     	/* We cannot insert when queue is full */
;;;88     	if (RingBuffer_IsFull(RingBuff))
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RingBuffer_IsFull
000012  2800              CMP      r0,#0
000014  d002              BEQ      |L4.28|
;;;89     		return 0;
000016  2000              MOVS     r0,#0
                  |L4.24|
;;;90     
;;;91     	/* Calculate the segment lengths */
;;;92     	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
;;;93     	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
;;;94     		cnt1 = RingBuff->count - RB_INDH(RingBuff);
;;;95     	cnt2 -= cnt1;
;;;96     
;;;97     	cnt1 = MIN(cnt1, num);
;;;98     	num -= cnt1;
;;;99     
;;;100    	cnt2 = MIN(cnt2, num);
;;;101    	num -= cnt2;
;;;102    
;;;103    	/* Write segment 1 */
;;;104    	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
;;;105    	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
;;;106    	RingBuff->head += cnt1;
;;;107    
;;;108    	/* Write segment 2 */
;;;109    	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
;;;110    	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
;;;111    	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
;;;112    	RingBuff->head += cnt2;
;;;113    
;;;114    	return cnt1 + cnt2;
;;;115    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L4.28|
00001c  bf00              NOP                            ;92
00001e  4620              MOV      r0,r4                 ;92
000020  f7fffffe          BL       RingBuffer_GetCount
000024  6861              LDR      r1,[r4,#4]            ;92
000026  1a0d              SUBS     r5,r1,r0              ;92
000028  462e              MOV      r6,r5                 ;92
00002a  6861              LDR      r1,[r4,#4]            ;93
00002c  1e49              SUBS     r1,r1,#1              ;93
00002e  68e0              LDR      r0,[r4,#0xc]          ;93
000030  4008              ANDS     r0,r0,r1              ;93
000032  1940              ADDS     r0,r0,r5              ;93
000034  6861              LDR      r1,[r4,#4]            ;93
000036  4288              CMP      r0,r1                 ;93
000038  d305              BCC      |L4.70|
00003a  6861              LDR      r1,[r4,#4]            ;94
00003c  1e49              SUBS     r1,r1,#1              ;94
00003e  68e0              LDR      r0,[r4,#0xc]          ;94
000040  4008              ANDS     r0,r0,r1              ;94
000042  6861              LDR      r1,[r4,#4]            ;94
000044  1a0d              SUBS     r5,r1,r0              ;94
                  |L4.70|
000046  1b76              SUBS     r6,r6,r5              ;95
000048  42bd              CMP      r5,r7                 ;97
00004a  da01              BGE      |L4.80|
00004c  4628              MOV      r0,r5                 ;97
00004e  e000              B        |L4.82|
                  |L4.80|
000050  4638              MOV      r0,r7                 ;97
                  |L4.82|
000052  4605              MOV      r5,r0                 ;97
000054  1b7f              SUBS     r7,r7,r5              ;98
000056  42be              CMP      r6,r7                 ;100
000058  da01              BGE      |L4.94|
00005a  4630              MOV      r0,r6                 ;100
00005c  e000              B        |L4.96|
                  |L4.94|
00005e  4638              MOV      r0,r7                 ;100
                  |L4.96|
000060  4606              MOV      r6,r0                 ;100
000062  1bbf              SUBS     r7,r7,r6              ;101
000064  6861              LDR      r1,[r4,#4]            ;104
000066  1e49              SUBS     r1,r1,#1              ;104
000068  68e0              LDR      r0,[r4,#0xc]          ;104
00006a  4008              ANDS     r0,r0,r1              ;104
00006c  68a1              LDR      r1,[r4,#8]            ;104
00006e  4348              MULS     r0,r1,r0              ;104
000070  9901              LDR      r1,[sp,#4]            ;104
000072  1840              ADDS     r0,r0,r1              ;104
000074  9001              STR      r0,[sp,#4]            ;104
000076  68a0              LDR      r0,[r4,#8]            ;105
000078  4368              MULS     r0,r5,r0              ;105
00007a  4602              MOV      r2,r0                 ;105
00007c  9903              LDR      r1,[sp,#0xc]          ;105
00007e  9801              LDR      r0,[sp,#4]            ;105
000080  f7fffffe          BL       __aeabi_memcpy
000084  68e0              LDR      r0,[r4,#0xc]          ;106
000086  1940              ADDS     r0,r0,r5              ;106
000088  60e0              STR      r0,[r4,#0xc]          ;106
00008a  6861              LDR      r1,[r4,#4]            ;109
00008c  1e49              SUBS     r1,r1,#1              ;109
00008e  68e0              LDR      r0,[r4,#0xc]          ;109
000090  4008              ANDS     r0,r0,r1              ;109
000092  68a1              LDR      r1,[r4,#8]            ;109
000094  4348              MULS     r0,r1,r0              ;109
000096  6821              LDR      r1,[r4,#0]            ;109
000098  1840              ADDS     r0,r0,r1              ;109
00009a  9001              STR      r0,[sp,#4]            ;109
00009c  68a0              LDR      r0,[r4,#8]            ;110
00009e  4368              MULS     r0,r5,r0              ;110
0000a0  9903              LDR      r1,[sp,#0xc]          ;110
0000a2  1840              ADDS     r0,r0,r1              ;110
0000a4  9003              STR      r0,[sp,#0xc]          ;110
0000a6  68a0              LDR      r0,[r4,#8]            ;111
0000a8  4370              MULS     r0,r6,r0              ;111
0000aa  4602              MOV      r2,r0                 ;111
0000ac  9903              LDR      r1,[sp,#0xc]          ;111
0000ae  9801              LDR      r0,[sp,#4]            ;111
0000b0  f7fffffe          BL       __aeabi_memcpy
0000b4  68e0              LDR      r0,[r4,#0xc]          ;112
0000b6  1980              ADDS     r0,r0,r6              ;112
0000b8  60e0              STR      r0,[r4,#0xc]          ;112
0000ba  19a8              ADDS     r0,r5,r6              ;114
0000bc  e7ac              B        |L4.24|
;;;116    
                          ENDP


                          AREA ||i.RingBuffer_IsEmpty||, CODE, READONLY, ALIGN=1

                  RingBuffer_IsEmpty PROC
;;;132     */
;;;133    STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
000000  4601              MOV      r1,r0
;;;134    {
;;;135    	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
000002  68c8              LDR      r0,[r1,#0xc]
000004  690a              LDR      r2,[r1,#0x10]
000006  4290              CMP      r0,r2
000008  d101              BNE      |L5.14|
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;136    }
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0                 ;135
000010  e7fc              B        |L5.12|
;;;137    
                          ENDP


                          AREA ||i.RingBuffer_IsFull||, CODE, READONLY, ALIGN=1

                  RingBuffer_IsFull PROC
;;;122     */
;;;123    STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
000000  b510              PUSH     {r4,lr}
;;;124    {
000002  4604              MOV      r4,r0
;;;125    	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       RingBuffer_GetCount
00000a  6861              LDR      r1,[r4,#4]
00000c  4288              CMP      r0,r1
00000e  db01              BLT      |L6.20|
000010  2001              MOVS     r0,#1
                  |L6.18|
;;;126    }
000012  bd10              POP      {r4,pc}
                  |L6.20|
000014  2000              MOVS     r0,#0                 ;125
000016  e7fc              B        |L6.18|
;;;127    
                          ENDP


                          AREA ||i.RingBuffer_Pop||, CODE, READONLY, ALIGN=1

                  RingBuffer_Pop PROC
;;;117    /* Pop single item from Ring Buffer */
;;;118    int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;120    	uint8_t *ptr = RingBuff->data;
000006  6826              LDR      r6,[r4,#0]
;;;121    
;;;122    	/* We cannot pop when queue is empty */
;;;123    	if (RingBuffer_IsEmpty(RingBuff))
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       RingBuffer_IsEmpty
00000e  2800              CMP      r0,#0
000010  d001              BEQ      |L7.22|
;;;124    		return 0;
000012  2000              MOVS     r0,#0
                  |L7.20|
;;;125    
;;;126    	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
;;;127    	memcpy(data, ptr, RingBuff->itemSz);
;;;128    	RingBuff->tail++;
;;;129    
;;;130    	return 1;
;;;131    }
000014  bd70              POP      {r4-r6,pc}
                  |L7.22|
000016  6861              LDR      r1,[r4,#4]            ;126
000018  1e49              SUBS     r1,r1,#1              ;126
00001a  6920              LDR      r0,[r4,#0x10]         ;126
00001c  4008              ANDS     r0,r0,r1              ;126
00001e  68a1              LDR      r1,[r4,#8]            ;126
000020  4348              MULS     r0,r1,r0              ;126
000022  1986              ADDS     r6,r0,r6              ;126
000024  4631              MOV      r1,r6                 ;127
000026  4628              MOV      r0,r5                 ;127
000028  68a2              LDR      r2,[r4,#8]            ;127
00002a  f7fffffe          BL       __aeabi_memcpy
00002e  6920              LDR      r0,[r4,#0x10]         ;128
000030  1c40              ADDS     r0,r0,#1              ;128
000032  6120              STR      r0,[r4,#0x10]         ;128
000034  2001              MOVS     r0,#1                 ;130
000036  e7ed              B        |L7.20|
;;;132    
                          ENDP


                          AREA ||i.RingBuffer_PopMult||, CODE, READONLY, ALIGN=1

                  RingBuffer_PopMult PROC
;;;133    /* Pop multiple items from Ring buffer */
;;;134    int RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;135    {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
000006  4617              MOV      r7,r2
;;;136    	uint8_t *ptr = RingBuff->data;
000008  6820              LDR      r0,[r4,#0]
00000a  9001              STR      r0,[sp,#4]
;;;137    	int cnt1, cnt2;
;;;138    
;;;139    	/* We cannot insert when queue is empty */
;;;140    	if (RingBuffer_IsEmpty(RingBuff))
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RingBuffer_IsEmpty
000012  2800              CMP      r0,#0
000014  d002              BEQ      |L8.28|
;;;141    		return 0;
000016  2000              MOVS     r0,#0
                  |L8.24|
;;;142    
;;;143    	/* Calculate the segment lengths */
;;;144    	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
;;;145    	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
;;;146    		cnt1 = RingBuff->count - RB_INDT(RingBuff);
;;;147    	cnt2 -= cnt1;
;;;148    
;;;149    	cnt1 = MIN(cnt1, num);
;;;150    	num -= cnt1;
;;;151    
;;;152    	cnt2 = MIN(cnt2, num);
;;;153    	num -= cnt2;
;;;154    
;;;155    	/* Write segment 1 */
;;;156    	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
;;;157    	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
;;;158    	RingBuff->tail += cnt1;
;;;159    
;;;160    	/* Write segment 2 */
;;;161    	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
;;;162    	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
;;;163    	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
;;;164    	RingBuff->tail += cnt2;
;;;165    
;;;166    	return cnt1 + cnt2;
;;;167    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L8.28|
00001c  4620              MOV      r0,r4                 ;144
00001e  f7fffffe          BL       RingBuffer_GetCount
000022  4606              MOV      r6,r0                 ;144
000024  4605              MOV      r5,r0                 ;144
000026  6861              LDR      r1,[r4,#4]            ;145
000028  1e49              SUBS     r1,r1,#1              ;145
00002a  6920              LDR      r0,[r4,#0x10]         ;145
00002c  4001              ANDS     r1,r1,r0              ;145
00002e  1948              ADDS     r0,r1,r5              ;145
000030  6861              LDR      r1,[r4,#4]            ;145
000032  4288              CMP      r0,r1                 ;145
000034  d305              BCC      |L8.66|
000036  6861              LDR      r1,[r4,#4]            ;146
000038  1e49              SUBS     r1,r1,#1              ;146
00003a  6920              LDR      r0,[r4,#0x10]         ;146
00003c  4008              ANDS     r0,r0,r1              ;146
00003e  6861              LDR      r1,[r4,#4]            ;146
000040  1a0d              SUBS     r5,r1,r0              ;146
                  |L8.66|
000042  1b76              SUBS     r6,r6,r5              ;147
000044  42bd              CMP      r5,r7                 ;149
000046  da01              BGE      |L8.76|
000048  4628              MOV      r0,r5                 ;149
00004a  e000              B        |L8.78|
                  |L8.76|
00004c  4638              MOV      r0,r7                 ;149
                  |L8.78|
00004e  4605              MOV      r5,r0                 ;149
000050  1b7f              SUBS     r7,r7,r5              ;150
000052  42be              CMP      r6,r7                 ;152
000054  da01              BGE      |L8.90|
000056  4630              MOV      r0,r6                 ;152
000058  e000              B        |L8.92|
                  |L8.90|
00005a  4638              MOV      r0,r7                 ;152
                  |L8.92|
00005c  4606              MOV      r6,r0                 ;152
00005e  1bbf              SUBS     r7,r7,r6              ;153
000060  6861              LDR      r1,[r4,#4]            ;156
000062  1e49              SUBS     r1,r1,#1              ;156
000064  6920              LDR      r0,[r4,#0x10]         ;156
000066  4008              ANDS     r0,r0,r1              ;156
000068  68a1              LDR      r1,[r4,#8]            ;156
00006a  4348              MULS     r0,r1,r0              ;156
00006c  9901              LDR      r1,[sp,#4]            ;156
00006e  1840              ADDS     r0,r0,r1              ;156
000070  9001              STR      r0,[sp,#4]            ;156
000072  68a0              LDR      r0,[r4,#8]            ;157
000074  4368              MULS     r0,r5,r0              ;157
000076  4602              MOV      r2,r0                 ;157
000078  9901              LDR      r1,[sp,#4]            ;157
00007a  9803              LDR      r0,[sp,#0xc]          ;157
00007c  f7fffffe          BL       __aeabi_memcpy
000080  6920              LDR      r0,[r4,#0x10]         ;158
000082  1940              ADDS     r0,r0,r5              ;158
000084  6120              STR      r0,[r4,#0x10]         ;158
000086  6861              LDR      r1,[r4,#4]            ;161
000088  1e49              SUBS     r1,r1,#1              ;161
00008a  6920              LDR      r0,[r4,#0x10]         ;161
00008c  4008              ANDS     r0,r0,r1              ;161
00008e  68a1              LDR      r1,[r4,#8]            ;161
000090  4348              MULS     r0,r1,r0              ;161
000092  6821              LDR      r1,[r4,#0]            ;161
000094  1840              ADDS     r0,r0,r1              ;161
000096  9001              STR      r0,[sp,#4]            ;161
000098  68a0              LDR      r0,[r4,#8]            ;162
00009a  4368              MULS     r0,r5,r0              ;162
00009c  9903              LDR      r1,[sp,#0xc]          ;162
00009e  1840              ADDS     r0,r0,r1              ;162
0000a0  9003              STR      r0,[sp,#0xc]          ;162
0000a2  68a0              LDR      r0,[r4,#8]            ;163
0000a4  4370              MULS     r0,r6,r0              ;163
0000a6  4602              MOV      r2,r0                 ;163
0000a8  9901              LDR      r1,[sp,#4]            ;163
0000aa  9803              LDR      r0,[sp,#0xc]          ;163
0000ac  f7fffffe          BL       __aeabi_memcpy
0000b0  6920              LDR      r0,[r4,#0x10]         ;164
0000b2  1980              ADDS     r0,r0,r6              ;164
0000b4  6120              STR      r0,[r4,#0x10]         ;164
0000b6  19a8              ADDS     r0,r5,r6              ;166
0000b8  e7ae              B        |L8.24|
                          ENDP

