; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\eventrecorder.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\eventrecorder.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.10\RTE -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.10\RTE\Compiler -IC:\Keil_v5\ARM\PACK\Keil\ARM_Compiler\1.6.2\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -D_RTE_ -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\eventrecorder.crf C:\Keil_v5\ARM\PACK\Keil\ARM_Compiler\1.6.2\Source\EventRecorder.c]
                          THUMB

                          AREA ||i.EventCheckFilter||, CODE, READONLY, ALIGN=2

                  EventCheckFilter PROC
;;;615    */
;;;616    __STATIC_INLINE uint32_t EventCheckFilter (uint32_t id) {
000000  4601              MOV      r1,r0
;;;617      uint32_t ret;
;;;618     
;;;619      if (EventStatus.state == 0U) {
000002  4a08              LDR      r2,|L1.36|
000004  7812              LDRB     r2,[r2,#0]  ; EventStatus
000006  2a00              CMP      r2,#0
000008  d101              BNE      |L1.14|
;;;620        ret = 0U;
00000a  2000              MOVS     r0,#0
00000c  e008              B        |L1.32|
                  |L1.14|
;;;621      } else {
;;;622        ret = ((uint32_t)EventFilter[(id >> (8 + 3)) & 0x7FU] >> ((id >> 8) & 0x7U)) & 1U;
00000e  038a              LSLS     r2,r1,#14
000010  0e52              LSRS     r2,r2,#25
000012  4b05              LDR      r3,|L1.40|
000014  5c9a              LDRB     r2,[r3,r2]
000016  054b              LSLS     r3,r1,#21
000018  0f5b              LSRS     r3,r3,#29
00001a  40da              LSRS     r2,r2,r3
00001c  07d0              LSLS     r0,r2,#31
00001e  0fc0              LSRS     r0,r0,#31
                  |L1.32|
;;;623      }
;;;624      return (ret);
;;;625    }
000020  4770              BX       lr
;;;626     
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      EventStatus
                  |L1.40|
                          DCD      EventFilter

                          AREA ||i.EventGetTS||, CODE, READONLY, ALIGN=2

                  EventGetTS PROC
;;;592    */
;;;593    static uint32_t EventGetTS (void) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
;;;594      uint32_t ts;
;;;595      uint32_t ts_last;
;;;596      uint32_t ts_last_prev;
;;;597     
;;;598      do {
000004  bf00              NOP      
                  |L2.6|
;;;599        ts_last_prev = *((volatile uint32_t *)&EventStatus.ts_last);
000006  4815              LDR      r0,|L2.92|
000008  6980              LDR      r0,[r0,#0x18]  ; EventStatus
00000a  9003              STR      r0,[sp,#0xc]
;;;600        ts = EventRecorderTimerGetCount();
00000c  f7fffffe          BL       EventRecorderTimerGetCount
000010  4604              MOV      r4,r0
;;;601        ts_last = UpdateTS(ts);
000012  4626              MOV      r6,r4
000014  4811              LDR      r0,|L2.92|
000016  3018              ADDS     r0,r0,#0x18
000018  4637              MOV      r7,r6
00001a  9002              STR      r0,[sp,#8]
00001c  f7fffffe          BL       __get_PRIMASK
000020  9001              STR      r0,[sp,#4]
000022  b672              CPSID    i
000024  9802              LDR      r0,[sp,#8]
000026  6800              LDR      r0,[r0,#0]
000028  9000              STR      r0,[sp,#0]
00002a  9802              LDR      r0,[sp,#8]
00002c  6007              STR      r7,[r0,#0]
00002e  9801              LDR      r0,[sp,#4]
000030  2800              CMP      r0,#0
000032  d100              BNE      |L2.54|
000034  b662              CPSIE    i
                  |L2.54|
000036  9d00              LDR      r5,[sp,#0]
000038  bf00              NOP      
00003a  bf00              NOP      
;;;602      } while (ts_last != ts_last_prev);
00003c  9803              LDR      r0,[sp,#0xc]
00003e  4285              CMP      r5,r0
000040  d1e1              BNE      |L2.6|
;;;603     
;;;604      if (ts < ts_last) {
000042  42ac              CMP      r4,r5
000044  d206              BCS      |L2.84|
;;;605        IncrementOverflowTS();
000046  bf00              NOP      
000048  4804              LDR      r0,|L2.92|
00004a  3010              ADDS     r0,r0,#0x10
00004c  f7fffffe          BL       atomic_inc32
000050  bf00              NOP      
000052  bf00              NOP      
                  |L2.84|
;;;606      }
;;;607     
;;;608      return (ts);
000054  4620              MOV      r0,r4
;;;609    }
000056  b005              ADD      sp,sp,#0x14
000058  bdf0              POP      {r4-r7,pc}
;;;610     
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      EventStatus

                          AREA ||i.EventRecord2||, CODE, READONLY, ALIGN=1

                  EventRecord2 PROC
;;;1119   */
;;;1120   uint32_t EventRecord2 (uint32_t id, uint32_t val1, uint32_t val2) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1121     uint32_t ts;
;;;1122     uint32_t ret;
;;;1123    
;;;1124     if (EventCheckFilter(id) == 0U) {
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       EventCheckFilter
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L3.22|
;;;1125       //lint -e{904} "Return statement before end of function"
;;;1126       return 1U;
000012  2001              MOVS     r0,#1
                  |L3.20|
;;;1127     }
;;;1128    
;;;1129     ts = EventGetTS();
;;;1130    
;;;1131     id &= EVENT_RECORD_ID_MASK;
;;;1132     id |= (__get_IPSR() != 0U) ? EVENT_RECORD_IRQ : 0U;
;;;1133    
;;;1134     ret = EventRecordItem(id | EVENT_RECORD_FIRST | EVENT_RECORD_LAST, ts, val1, val2);
;;;1135    
;;;1136     return (ret);
;;;1137   }
000014  bdf8              POP      {r3-r7,pc}
                  |L3.22|
000016  f7fffffe          BL       EventGetTS
00001a  4607              MOV      r7,r0                 ;1129
00001c  b2a4              UXTH     r4,r4                 ;1131
00001e  bf00              NOP                            ;1132
000020  f3ef8005          MRS      r0,IPSR               ;1132
000024  2800              CMP      r0,#0                 ;1132
000026  d002              BEQ      |L3.46|
000028  2001              MOVS     r0,#1                 ;1132
00002a  04c0              LSLS     r0,r0,#19             ;1132
00002c  e000              B        |L3.48|
                  |L3.46|
00002e  2000              MOVS     r0,#0                 ;1132
                  |L3.48|
000030  4304              ORRS     r4,r4,r0              ;1132
000032  4621              MOV      r1,r4                 ;1134
000034  2203              MOVS     r2,#3                 ;1134
000036  0612              LSLS     r2,r2,#24             ;1134
000038  4311              ORRS     r1,r1,r2              ;1134
00003a  4608              MOV      r0,r1                 ;1134
00003c  4633              MOV      r3,r6                 ;1134
00003e  462a              MOV      r2,r5                 ;1134
000040  4639              MOV      r1,r7                 ;1134
000042  f7fffffe          BL       EventRecordItem
000046  9000              STR      r0,[sp,#0]            ;1134
000048  9800              LDR      r0,[sp,#0]            ;1136
00004a  e7e3              B        |L3.20|
;;;1138    
                          ENDP


                          AREA ||i.EventRecord4||, CODE, READONLY, ALIGN=2

                  EventRecord4 PROC
;;;1147   */
;;;1148   uint32_t EventRecord4 (uint32_t id,
000000  b5ff              PUSH     {r0-r7,lr}
;;;1149                          uint32_t val1, uint32_t val2, uint32_t val3, uint32_t val4) {
000002  b083              SUB      sp,sp,#0xc
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;1150     uint32_t ts;
;;;1151     uint32_t ctx;
;;;1152     uint32_t ret;
;;;1153    
;;;1154     if (EventCheckFilter(id) == 0U) {
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       EventCheckFilter
00000e  2800              CMP      r0,#0
000010  d102              BNE      |L4.24|
;;;1155       //lint -e{904} "Return statement before end of function"
;;;1156       return 1U;
000012  2001              MOVS     r0,#1
                  |L4.20|
;;;1157     }
;;;1158    
;;;1159     ts = EventGetTS();
;;;1160    
;;;1161     id &= EVENT_RECORD_ID_MASK;
;;;1162     id |= (__get_IPSR() != 0U) ? EVENT_RECORD_IRQ : 0U;
;;;1163     ctx = (GetContext() << EVENT_RECORD_CTX_POS) & EVENT_RECORD_CTX_MASK;
;;;1164    
;;;1165     ret = EventRecordItem(id | ctx | EVENT_RECORD_FIRST, ts, val1, val2);
;;;1166     if (ret == 0U) {
;;;1167       //lint -e{904} "Return statement before end of function"
;;;1168       return 0U;
;;;1169     }
;;;1170     ret = EventRecordItem(1U | ctx | EVENT_RECORD_LAST,  ts, val3, val4);
;;;1171    
;;;1172     return (ret);
;;;1173   }
000014  b007              ADD      sp,sp,#0x1c
000016  bdf0              POP      {r4-r7,pc}
                  |L4.24|
000018  f7fffffe          BL       EventGetTS
00001c  9002              STR      r0,[sp,#8]            ;1159
00001e  b2a4              UXTH     r4,r4                 ;1161
000020  bf00              NOP                            ;1162
000022  f3ef8005          MRS      r0,IPSR               ;1162
000026  2800              CMP      r0,#0                 ;1162
000028  d002              BEQ      |L4.48|
00002a  2001              MOVS     r0,#1                 ;1162
00002c  04c0              LSLS     r0,r0,#19             ;1162
00002e  e000              B        |L4.50|
                  |L4.48|
000030  2000              MOVS     r0,#0                 ;1162
                  |L4.50|
000032  4304              ORRS     r4,r4,r0              ;1162
000034  f7fffffe          BL       GetContext
000038  0405              LSLS     r5,r0,#16             ;1163
00003a  2107              MOVS     r1,#7                 ;1163
00003c  0409              LSLS     r1,r1,#16             ;1163
00003e  400d              ANDS     r5,r5,r1              ;1163
000040  4620              MOV      r0,r4                 ;1165
000042  4328              ORRS     r0,r0,r5              ;1165
000044  2101              MOVS     r1,#1                 ;1165
000046  0609              LSLS     r1,r1,#24             ;1165
000048  4308              ORRS     r0,r0,r1              ;1165
00004a  9001              STR      r0,[sp,#4]            ;1165
00004c  463a              MOV      r2,r7                 ;1165
00004e  9b05              LDR      r3,[sp,#0x14]         ;1165
000050  9902              LDR      r1,[sp,#8]            ;1165
000052  f7fffffe          BL       EventRecordItem
000056  4606              MOV      r6,r0                 ;1165
000058  2e00              CMP      r6,#0                 ;1166
00005a  d100              BNE      |L4.94|
00005c  e7da              B        |L4.20|
                  |L4.94|
00005e  4628              MOV      r0,r5                 ;1170
000060  4905              LDR      r1,|L4.120|
000062  4308              ORRS     r0,r0,r1              ;1170
000064  9001              STR      r0,[sp,#4]            ;1170
000066  9b0c              LDR      r3,[sp,#0x30]         ;1170
000068  9a06              LDR      r2,[sp,#0x18]         ;1170
00006a  9902              LDR      r1,[sp,#8]            ;1170
00006c  f7fffffe          BL       EventRecordItem
000070  4606              MOV      r6,r0                 ;1170
000072  4630              MOV      r0,r6                 ;1172
000074  e7ce              B        |L4.20|
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x02000001

                          AREA ||i.EventRecordData||, CODE, READONLY, ALIGN=2

                  EventRecordData PROC
;;;1033   */
;;;1034   uint32_t EventRecordData (uint32_t id, const void *data, uint32_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;1035     //lint --e{934}  "Taking address of near auto variable"
;;;1036     //lint --e{9016} "pointer arithmetic other than array indexing used"
;;;1037     const uint8_t *dptr;
;;;1038     uint32_t ts;
;;;1039     uint32_t ctx;
;;;1040     uint32_t val[2];
;;;1041     uint32_t ret;
;;;1042    
;;;1043     if ((data == NULL) || (len > EVENT_DATA_MAX_LENGTH)) {
000008  9807              LDR      r0,[sp,#0x1c]
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L5.18|
00000e  2d80              CMP      r5,#0x80
000010  d902              BLS      |L5.24|
                  |L5.18|
;;;1044       //lint -e{904} "Return statement before end of function"
;;;1045       return 0U;
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;1046     }
;;;1047    
;;;1048     if (EventCheckFilter(id) == 0U) {
;;;1049       //lint -e{904} "Return statement before end of function"
;;;1050       return 1U;
;;;1051     }
;;;1052    
;;;1053     ts = EventGetTS();
;;;1054    
;;;1055     id &= EVENT_RECORD_ID_MASK;
;;;1056     id |= (__get_IPSR() != 0U) ? EVENT_RECORD_IRQ : 0U;
;;;1057     //lint -e{9079} -e{9087} "conversion from pointer to void to pointer to other type"
;;;1058     dptr = (const uint8_t *)data;
;;;1059    
;;;1060     if (len == 0U) {
;;;1061       ret = EventRecordItem(id, ts, 0U, 0U);
;;;1062       //lint -e{904} "Return statement before end of function"
;;;1063       return (ret);
;;;1064     }
;;;1065    
;;;1066     if (len <= 8U) {
;;;1067       val[0] = 0U;
;;;1068       val[1] = 0U;
;;;1069       memcpy(val, dptr, len);
;;;1070       id |= (len << EVENT_RECORD_DLEN_POS) & EVENT_RECORD_DLEN_MASK;
;;;1071       ret = EventRecordItem(id | EVENT_RECORD_FIRST | EVENT_RECORD_LAST, ts, val[0], val[1]);
;;;1072       //lint -e{904} "Return statement before end of function"
;;;1073       return (ret);
;;;1074     }
;;;1075    
;;;1076     ctx = (GetContext() << EVENT_RECORD_CTX_POS) & EVENT_RECORD_CTX_MASK;
;;;1077    
;;;1078     memcpy(val, dptr, 8U);
;;;1079     dptr += 8U;
;;;1080     len  -= 8U;
;;;1081     id |= ctx;
;;;1082     ret = EventRecordItem(id | EVENT_RECORD_FIRST, ts, val[0], val[1]);
;;;1083     if (ret == 0U) {
;;;1084       //lint -e{904} "Return statement before end of function"
;;;1085       return 0U;
;;;1086     }
;;;1087    
;;;1088     //lint -e{9044} "function parameter modified"
;;;1089     id = 0xFF01U | ctx;
;;;1090    
;;;1091     while (len > 8U) {
;;;1092       memcpy(val, dptr, 8U);
;;;1093       dptr += 8U;
;;;1094       len  -= 8U;
;;;1095       ret = EventRecordItem(id, ts, val[0], val[1]);
;;;1096       id++;
;;;1097       if (ret == 0U) {
;;;1098         //lint -e{904} "Return statement before end of function"
;;;1099         return 0U;
;;;1100       }
;;;1101     }
;;;1102    
;;;1103     val[0] = 0U;
;;;1104     val[1] = 0U;
;;;1105     memcpy(val, dptr, len);
;;;1106     id &= ~0xFF00U;
;;;1107     id |= len << 8;
;;;1108     ret = EventRecordItem(id | EVENT_RECORD_LAST, ts, val[0], val[1]);
;;;1109    
;;;1110     return (ret);
;;;1111   }
000014  b009              ADD      sp,sp,#0x24
000016  bdf0              POP      {r4-r7,pc}
                  |L5.24|
000018  4620              MOV      r0,r4                 ;1048
00001a  f7fffffe          BL       EventCheckFilter
00001e  2800              CMP      r0,#0                 ;1048
000020  d101              BNE      |L5.38|
000022  2001              MOVS     r0,#1                 ;1050
000024  e7f6              B        |L5.20|
                  |L5.38|
000026  f7fffffe          BL       EventGetTS
00002a  9005              STR      r0,[sp,#0x14]         ;1053
00002c  b2a4              UXTH     r4,r4                 ;1055
00002e  bf00              NOP                            ;1056
000030  f3ef8005          MRS      r0,IPSR               ;1056
000034  2800              CMP      r0,#0                 ;1056
000036  d002              BEQ      |L5.62|
000038  2001              MOVS     r0,#1                 ;1056
00003a  04c0              LSLS     r0,r0,#19             ;1056
00003c  e000              B        |L5.64|
                  |L5.62|
00003e  2000              MOVS     r0,#0                 ;1056
                  |L5.64|
000040  4304              ORRS     r4,r4,r0              ;1056
000042  9f07              LDR      r7,[sp,#0x1c]         ;1058
000044  2d00              CMP      r5,#0                 ;1060
000046  d108              BNE      |L5.90|
000048  2300              MOVS     r3,#0                 ;1061
00004a  461a              MOV      r2,r3                 ;1061
00004c  4620              MOV      r0,r4                 ;1061
00004e  9905              LDR      r1,[sp,#0x14]         ;1061
000050  f7fffffe          BL       EventRecordItem
000054  4606              MOV      r6,r0                 ;1061
000056  4630              MOV      r0,r6                 ;1063
000058  e7dc              B        |L5.20|
                  |L5.90|
00005a  2d08              CMP      r5,#8                 ;1066
00005c  d819              BHI      |L5.146|
00005e  2000              MOVS     r0,#0                 ;1067
000060  9002              STR      r0,[sp,#8]            ;1067
000062  9003              STR      r0,[sp,#0xc]          ;1068
000064  462a              MOV      r2,r5                 ;1069
000066  4639              MOV      r1,r7                 ;1069
000068  a802              ADD      r0,sp,#8              ;1069
00006a  f7fffffe          BL       __aeabi_memcpy
00006e  0428              LSLS     r0,r5,#16             ;1070
000070  2107              MOVS     r1,#7                 ;1070
000072  0409              LSLS     r1,r1,#16             ;1070
000074  4008              ANDS     r0,r0,r1              ;1070
000076  4304              ORRS     r4,r4,r0              ;1070
000078  4620              MOV      r0,r4                 ;1071
00007a  2103              MOVS     r1,#3                 ;1071
00007c  0609              LSLS     r1,r1,#24             ;1071
00007e  4308              ORRS     r0,r0,r1              ;1071
000080  9b03              LDR      r3,[sp,#0xc]          ;1071
000082  9a02              LDR      r2,[sp,#8]            ;1071
000084  9001              STR      r0,[sp,#4]            ;1071
000086  9905              LDR      r1,[sp,#0x14]         ;1071
000088  f7fffffe          BL       EventRecordItem
00008c  4606              MOV      r6,r0                 ;1071
00008e  4630              MOV      r0,r6                 ;1073
000090  e7c0              B        |L5.20|
                  |L5.146|
000092  f7fffffe          BL       GetContext
000096  0400              LSLS     r0,r0,#16             ;1076
000098  2107              MOVS     r1,#7                 ;1076
00009a  0409              LSLS     r1,r1,#16             ;1076
00009c  4008              ANDS     r0,r0,r1              ;1076
00009e  9004              STR      r0,[sp,#0x10]         ;1076
0000a0  2208              MOVS     r2,#8                 ;1078
0000a2  4639              MOV      r1,r7                 ;1078
0000a4  a802              ADD      r0,sp,#8              ;1078
0000a6  f7fffffe          BL       __aeabi_memcpy
0000aa  3708              ADDS     r7,r7,#8              ;1079
0000ac  3d08              SUBS     r5,r5,#8              ;1080
0000ae  9804              LDR      r0,[sp,#0x10]         ;1081
0000b0  4304              ORRS     r4,r4,r0              ;1081
0000b2  2001              MOVS     r0,#1                 ;1082
0000b4  0600              LSLS     r0,r0,#24             ;1082
0000b6  4320              ORRS     r0,r0,r4              ;1082
0000b8  9b03              LDR      r3,[sp,#0xc]          ;1082
0000ba  9a02              LDR      r2,[sp,#8]            ;1082
0000bc  9001              STR      r0,[sp,#4]            ;1082
0000be  9905              LDR      r1,[sp,#0x14]         ;1082
0000c0  f7fffffe          BL       EventRecordItem
0000c4  4606              MOV      r6,r0                 ;1082
0000c6  2e00              CMP      r6,#0                 ;1083
0000c8  d100              BNE      |L5.204|
0000ca  e7a3              B        |L5.20|
                  |L5.204|
0000cc  4919              LDR      r1,|L5.308|
0000ce  9804              LDR      r0,[sp,#0x10]         ;1089
0000d0  4308              ORRS     r0,r0,r1              ;1089
0000d2  4604              MOV      r4,r0                 ;1089
0000d4  e011              B        |L5.250|
                  |L5.214|
0000d6  2208              MOVS     r2,#8                 ;1092
0000d8  4639              MOV      r1,r7                 ;1092
0000da  a802              ADD      r0,sp,#8              ;1092
0000dc  f7fffffe          BL       __aeabi_memcpy
0000e0  3708              ADDS     r7,r7,#8              ;1093
0000e2  3d08              SUBS     r5,r5,#8              ;1094
0000e4  4620              MOV      r0,r4                 ;1095
0000e6  9b03              LDR      r3,[sp,#0xc]          ;1095
0000e8  9a02              LDR      r2,[sp,#8]            ;1095
0000ea  9905              LDR      r1,[sp,#0x14]         ;1095
0000ec  f7fffffe          BL       EventRecordItem
0000f0  4606              MOV      r6,r0                 ;1095
0000f2  1c64              ADDS     r4,r4,#1              ;1096
0000f4  2e00              CMP      r6,#0                 ;1097
0000f6  d100              BNE      |L5.250|
0000f8  e78c              B        |L5.20|
                  |L5.250|
0000fa  2d08              CMP      r5,#8                 ;1091
0000fc  d8eb              BHI      |L5.214|
0000fe  2000              MOVS     r0,#0                 ;1103
000100  9002              STR      r0,[sp,#8]            ;1103
000102  9003              STR      r0,[sp,#0xc]          ;1104
000104  462a              MOV      r2,r5                 ;1105
000106  4639              MOV      r1,r7                 ;1105
000108  a802              ADD      r0,sp,#8              ;1105
00010a  f7fffffe          BL       __aeabi_memcpy
00010e  21ff              MOVS     r1,#0xff              ;1106
000110  0209              LSLS     r1,r1,#8              ;1106
000112  4620              MOV      r0,r4                 ;1106
000114  4388              BICS     r0,r0,r1              ;1106
000116  4604              MOV      r4,r0                 ;1106
000118  0228              LSLS     r0,r5,#8              ;1107
00011a  4304              ORRS     r4,r4,r0              ;1107
00011c  2001              MOVS     r0,#1                 ;1108
00011e  0640              LSLS     r0,r0,#25             ;1108
000120  4320              ORRS     r0,r0,r4              ;1108
000122  9b03              LDR      r3,[sp,#0xc]          ;1108
000124  9a02              LDR      r2,[sp,#8]            ;1108
000126  9001              STR      r0,[sp,#4]            ;1108
000128  9905              LDR      r1,[sp,#0x14]         ;1108
00012a  f7fffffe          BL       EventRecordItem
00012e  4606              MOV      r6,r0                 ;1108
000130  4630              MOV      r0,r6                 ;1110
000132  e76f              B        |L5.20|
;;;1112    
                          ENDP

                  |L5.308|
                          DCD      0x0000ff01

                          AREA ||i.EventRecordItem||, CODE, READONLY, ALIGN=2

                  EventRecordItem PROC
;;;547    */
;;;548    static uint32_t EventRecordItem (uint32_t id, uint32_t ts, uint32_t val1, uint32_t val2) {
000000  b5ff              PUSH     {r0-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;549      EventRecord_t *record;
;;;550      uint32_t cnt, i;
;;;551      uint32_t info;
;;;552      uint32_t tbit;
;;;553      uint32_t seq;
;;;554     
;;;555      for (cnt = EVENT_RECORD_MAX_LOCKED; cnt != 0U; cnt--) {
000004  2007              MOVS     r0,#7
000006  9006              STR      r0,[sp,#0x18]
000008  e082              B        |L6.272|
                  |L6.10|
;;;556        i = GetRecordIndex();
00000a  bf00              NOP      
00000c  4847              LDR      r0,|L6.300|
00000e  f7fffffe          BL       atomic_inc32
000012  4606              MOV      r6,r0
;;;557        record = &EventBuffer[i & (EVENT_RECORD_COUNT - 1U)];
000014  06b0              LSLS     r0,r6,#26
000016  0d80              LSRS     r0,r0,#22
000018  4945              LDR      r1,|L6.304|
00001a  1844              ADDS     r4,r0,r1
;;;558        seq  = ((i / EVENT_RECORD_COUNT) << EVENT_RECORD_SEQ_POS) & EVENT_RECORD_SEQ_MASK;
00001c  09b0              LSRS     r0,r6,#6
00001e  0500              LSLS     r0,r0,#20
000020  210f              MOVS     r1,#0xf
000022  0509              LSLS     r1,r1,#20
000024  4008              ANDS     r0,r0,r1
000026  9004              STR      r0,[sp,#0x10]
;;;559        info = id                                    | 
000028  9904              LDR      r1,[sp,#0x10]
00002a  9807              LDR      r0,[sp,#0x1c]
00002c  4308              ORRS     r0,r0,r1
00002e  9908              LDR      r1,[sp,#0x20]
000030  08c9              LSRS     r1,r1,#3
000032  2201              MOVS     r2,#1
000034  0712              LSLS     r2,r2,#28
000036  4011              ANDS     r1,r1,r2
000038  4308              ORRS     r0,r0,r1
00003a  9909              LDR      r1,[sp,#0x24]
00003c  0889              LSRS     r1,r1,#2
00003e  0052              LSLS     r2,r2,#1
000040  4011              ANDS     r1,r1,r2
000042  4308              ORRS     r0,r0,r1
000044  990a              LDR      r1,[sp,#0x28]
000046  0849              LSRS     r1,r1,#1
000048  0052              LSLS     r2,r2,#1
00004a  4011              ANDS     r1,r1,r2
00004c  4308              ORRS     r0,r0,r1
00004e  2103              MOVS     r1,#3
000050  0689              LSLS     r1,r1,#26
000052  4308              ORRS     r0,r0,r1
000054  4605              MOV      r5,r0
;;;560               seq                                   |
;;;561               ((ts   >> 3) & EVENT_RECORD_MSB_TS)   |
;;;562               ((val1 >> 2) & EVENT_RECORD_MSB_VAL1) |
;;;563               ((val2 >> 1) & EVENT_RECORD_MSB_VAL2) |
;;;564               EVENT_RECORD_VALID                    |
;;;565               EVENT_RECORD_LOCKED;
;;;566        info = LockRecord(&record->info, info);
000056  9503              STR      r5,[sp,#0xc]
000058  f7fffffe          BL       __get_PRIMASK
00005c  9002              STR      r0,[sp,#8]
00005e  b672              CPSID    i
000060  68e7              LDR      r7,[r4,#0xc]
000062  2001              MOVS     r0,#1
000064  0680              LSLS     r0,r0,#26
000066  4038              ANDS     r0,r0,r7
000068  2800              CMP      r0,#0
00006a  d106              BNE      |L6.122|
00006c  0ff8              LSRS     r0,r7,#31
00006e  07c0              LSLS     r0,r0,#31
000070  9903              LDR      r1,[sp,#0xc]
000072  4308              ORRS     r0,r0,r1
000074  4607              MOV      r7,r0
000076  60e7              STR      r7,[r4,#0xc]
000078  e000              B        |L6.124|
                  |L6.122|
00007a  2700              MOVS     r7,#0
                  |L6.124|
00007c  9802              LDR      r0,[sp,#8]
00007e  2800              CMP      r0,#0
000080  d100              BNE      |L6.132|
000082  b662              CPSIE    i
                  |L6.132|
000084  bf00              NOP      
000086  463d              MOV      r5,r7
;;;567        if ((info & EVENT_RECORD_LOCKED) != 0U) {
000088  2001              MOVS     r0,#1
00008a  0680              LSLS     r0,r0,#26
00008c  4028              ANDS     r0,r0,r5
00008e  2800              CMP      r0,#0
000090  d03b              BEQ      |L6.266|
;;;568          info ^= EVENT_RECORD_LOCKED;
000092  2001              MOVS     r0,#1
000094  0680              LSLS     r0,r0,#26
000096  4045              EORS     r5,r5,r0
;;;569          info ^= EVENT_RECORD_TBIT;
000098  0140              LSLS     r0,r0,#5
00009a  4045              EORS     r5,r5,r0
;;;570          tbit  = info & EVENT_RECORD_TBIT;
00009c  4028              ANDS     r0,r0,r5
00009e  9005              STR      r0,[sp,#0x14]
;;;571          record->ts   = (ts   & ~EVENT_RECORD_TBIT) | tbit;
0000a0  9808              LDR      r0,[sp,#0x20]
0000a2  0041              LSLS     r1,r0,#1
0000a4  0849              LSRS     r1,r1,#1
0000a6  9805              LDR      r0,[sp,#0x14]
0000a8  4301              ORRS     r1,r1,r0
0000aa  6021              STR      r1,[r4,#0]
;;;572          record->val1 = (val1 & ~EVENT_RECORD_TBIT) | tbit;
0000ac  9809              LDR      r0,[sp,#0x24]
0000ae  0041              LSLS     r1,r0,#1
0000b0  0849              LSRS     r1,r1,#1
0000b2  9805              LDR      r0,[sp,#0x14]
0000b4  4301              ORRS     r1,r1,r0
0000b6  6061              STR      r1,[r4,#4]
;;;573          record->val2 = (val2 & ~EVENT_RECORD_TBIT) | tbit;
0000b8  980a              LDR      r0,[sp,#0x28]
0000ba  0041              LSLS     r1,r0,#1
0000bc  0849              LSRS     r1,r1,#1
0000be  9805              LDR      r0,[sp,#0x14]
0000c0  4301              ORRS     r1,r1,r0
0000c2  60a1              STR      r1,[r4,#8]
;;;574          if ((UnlockRecord(&record->info, info)) != 0U) {
0000c4  9503              STR      r5,[sp,#0xc]
0000c6  f7fffffe          BL       __get_PRIMASK
0000ca  9002              STR      r0,[sp,#8]
0000cc  b672              CPSID    i
0000ce  68e0              LDR      r0,[r4,#0xc]
0000d0  9001              STR      r0,[sp,#4]
0000d2  2101              MOVS     r1,#1
0000d4  0689              LSLS     r1,r1,#26
0000d6  9801              LDR      r0,[sp,#4]
0000d8  4008              ANDS     r0,r0,r1
0000da  2800              CMP      r0,#0
0000dc  d003              BEQ      |L6.230|
0000de  9803              LDR      r0,[sp,#0xc]
0000e0  60e0              STR      r0,[r4,#0xc]
0000e2  2701              MOVS     r7,#1
0000e4  e000              B        |L6.232|
                  |L6.230|
0000e6  2700              MOVS     r7,#0
                  |L6.232|
0000e8  9802              LDR      r0,[sp,#8]
0000ea  2800              CMP      r0,#0
0000ec  d100              BNE      |L6.240|
0000ee  b662              CPSIE    i
                  |L6.240|
0000f0  bf00              NOP      
0000f2  2f00              CMP      r7,#0
0000f4  d008              BEQ      |L6.264|
;;;575            IncrementRecordsWritten();
0000f6  bf00              NOP      
0000f8  480c              LDR      r0,|L6.300|
0000fa  1d00              ADDS     r0,r0,#4
0000fc  f7fffffe          BL       atomic_inc32
000100  bf00              NOP      
;;;576            //lint -e{904} "Return statement before end of function"
;;;577            return 1U;
000102  2001              MOVS     r0,#1
                  |L6.260|
;;;578          } else {
;;;579            break;
;;;580          }
;;;581        }
;;;582      }
;;;583     
;;;584      IncrementRecordsDumped();
;;;585      return 0U;
;;;586    }
000104  b00b              ADD      sp,sp,#0x2c
000106  bdf0              POP      {r4-r7,pc}
                  |L6.264|
000108  e006              B        |L6.280|
                  |L6.266|
00010a  9806              LDR      r0,[sp,#0x18]         ;555
00010c  1e40              SUBS     r0,r0,#1              ;555
00010e  9006              STR      r0,[sp,#0x18]         ;555
                  |L6.272|
000110  9806              LDR      r0,[sp,#0x18]         ;555
000112  2800              CMP      r0,#0                 ;555
000114  d000              BEQ      |L6.280|
000116  e778              B        |L6.10|
                  |L6.280|
000118  bf00              NOP                            ;579
00011a  bf00              NOP                            ;584
00011c  4803              LDR      r0,|L6.300|
00011e  3008              ADDS     r0,r0,#8              ;584
000120  f7fffffe          BL       atomic_inc32
000124  bf00              NOP                            ;584
000126  2000              MOVS     r0,#0                 ;585
000128  e7ec              B        |L6.260|
;;;587     
                          ENDP

00012a  0000              DCW      0x0000
                  |L6.300|
                          DCD      EventStatus+0x4
                  |L6.304|
                          DCD      EventBuffer

                          AREA ||i.EventRecorderClockUpdate||, CODE, READONLY, ALIGN=2

                  EventRecorderClockUpdate PROC
;;;1014   */
;;;1015   uint32_t EventRecorderClockUpdate (void) {
000000  b510              PUSH     {r4,lr}
;;;1016     uint32_t ts;
;;;1017    
;;;1018     EventStatus.ts_freq = EventRecorderTimerGetFreq();
000002  f7fffffe          BL       EventRecorderTimerGetFreq
000006  4907              LDR      r1,|L7.36|
000008  6148              STR      r0,[r1,#0x14]  ; EventStatus
;;;1019    
;;;1020     ts = EventGetTS();
00000a  f7fffffe          BL       EventGetTS
00000e  4604              MOV      r4,r0
;;;1021    
;;;1022     (void)EventRecordItem(ID_EVENT_CLOCK, ts, EventStatus.ts_freq, 0U);
000010  4804              LDR      r0,|L7.36|
000012  2300              MOVS     r3,#0
000014  4621              MOV      r1,r4
000016  6942              LDR      r2,[r0,#0x14]  ; EventStatus
000018  4803              LDR      r0,|L7.40|
00001a  f7fffffe          BL       EventRecordItem
;;;1023    
;;;1024     return 1U;
00001e  2001              MOVS     r0,#1
;;;1025   }
000020  bd10              POP      {r4,pc}
;;;1026    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      EventStatus
                  |L7.40|
                          DCD      0x0300ff03

                          AREA ||i.EventRecorderDisable||, CODE, READONLY, ALIGN=2

                  EventRecorderDisable PROC
;;;948    */
;;;949    uint32_t EventRecorderDisable (uint32_t recording, uint32_t comp_start, uint32_t comp_end) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;950      uint32_t ofs;
;;;951      uint32_t i, j;
;;;952     
;;;953      if ((comp_start >= 0xFFU) || (comp_end >= 0xFFU)) {
000006  2cff              CMP      r4,#0xff
000008  d201              BCS      |L8.14|
00000a  2dff              CMP      r5,#0xff
00000c  d301              BCC      |L8.18|
                  |L8.14|
;;;954        //lint -e{904} "Return statement before end of function"
;;;955        return 0U;
00000e  2000              MOVS     r0,#0
                  |L8.16|
;;;956      }
;;;957     
;;;958      ofs = 0U;
;;;959      for (i = 0U; i < 4U; i++) {
;;;960        if ((recording & (1UL << i)) != 0U) {
;;;961          for (j = comp_start; j <= comp_end; j++) {
;;;962            EventFilter[ofs + (j >> 3)] &= ~(1U << (j & 0x7U));
;;;963          }
;;;964        }
;;;965        ofs += 32U;
;;;966      }
;;;967     
;;;968      return 1U;
;;;969    }
000010  bdfe              POP      {r1-r7,pc}
                  |L8.18|
000012  2200              MOVS     r2,#0                 ;958
000014  2300              MOVS     r3,#0                 ;959
000016  e019              B        |L8.76|
                  |L8.24|
000018  2001              MOVS     r0,#1                 ;960
00001a  4098              LSLS     r0,r0,r3              ;960
00001c  9e00              LDR      r6,[sp,#0]            ;960
00001e  4030              ANDS     r0,r0,r6              ;960
000020  2800              CMP      r0,#0                 ;960
000022  d011              BEQ      |L8.72|
000024  4621              MOV      r1,r4                 ;961
000026  e00d              B        |L8.68|
                  |L8.40|
000028  08c8              LSRS     r0,r1,#3              ;962
00002a  1880              ADDS     r0,r0,r2              ;962
00002c  4e09              LDR      r6,|L8.84|
00002e  5c30              LDRB     r0,[r6,r0]            ;962
000030  074f              LSLS     r7,r1,#29             ;962
000032  0f7f              LSRS     r7,r7,#29             ;962
000034  2601              MOVS     r6,#1                 ;962
000036  40be              LSLS     r6,r6,r7              ;962
000038  43b0              BICS     r0,r0,r6              ;962
00003a  08ce              LSRS     r6,r1,#3              ;962
00003c  18b6              ADDS     r6,r6,r2              ;962
00003e  4f05              LDR      r7,|L8.84|
000040  55b8              STRB     r0,[r7,r6]            ;962
000042  1c49              ADDS     r1,r1,#1              ;961
                  |L8.68|
000044  42a9              CMP      r1,r5                 ;961
000046  d9ef              BLS      |L8.40|
                  |L8.72|
000048  3220              ADDS     r2,r2,#0x20           ;965
00004a  1c5b              ADDS     r3,r3,#1              ;959
                  |L8.76|
00004c  2b04              CMP      r3,#4                 ;959
00004e  d3e3              BCC      |L8.24|
000050  2001              MOVS     r0,#1                 ;968
000052  e7dd              B        |L8.16|
;;;970     
                          ENDP

                  |L8.84|
                          DCD      EventFilter

                          AREA ||i.EventRecorderEnable||, CODE, READONLY, ALIGN=2

                  EventRecorderEnable PROC
;;;919    */
;;;920    uint32_t EventRecorderEnable (uint32_t recording, uint32_t comp_start, uint32_t comp_end) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;921      uint32_t ofs;
;;;922      uint32_t i, j;
;;;923     
;;;924      if ((comp_start >= 0xFFU) || (comp_end >= 0xFFU)) {
000006  2cff              CMP      r4,#0xff
000008  d201              BCS      |L9.14|
00000a  2dff              CMP      r5,#0xff
00000c  d301              BCC      |L9.18|
                  |L9.14|
;;;925        //lint -e{904} "Return statement before end of function"
;;;926        return 0U;
00000e  2000              MOVS     r0,#0
                  |L9.16|
;;;927      }
;;;928     
;;;929      ofs = 0U;
;;;930      for (i = 0U; i < 4U; i++) {
;;;931        if ((recording & (1UL << i)) != 0U) {
;;;932          for (j = comp_start; j <= comp_end; j++) {
;;;933            EventFilter[ofs + (j >> 3)] |= (1U << (j & 0x7U));
;;;934          }
;;;935        }
;;;936        ofs += 32U;
;;;937      }
;;;938     
;;;939      return 1U;
;;;940    }
000010  bdfe              POP      {r1-r7,pc}
                  |L9.18|
000012  2200              MOVS     r2,#0                 ;929
000014  2300              MOVS     r3,#0                 ;930
000016  e019              B        |L9.76|
                  |L9.24|
000018  2001              MOVS     r0,#1                 ;931
00001a  4098              LSLS     r0,r0,r3              ;931
00001c  9e00              LDR      r6,[sp,#0]            ;931
00001e  4030              ANDS     r0,r0,r6              ;931
000020  2800              CMP      r0,#0                 ;931
000022  d011              BEQ      |L9.72|
000024  4621              MOV      r1,r4                 ;932
000026  e00d              B        |L9.68|
                  |L9.40|
000028  08c8              LSRS     r0,r1,#3              ;933
00002a  1880              ADDS     r0,r0,r2              ;933
00002c  4e09              LDR      r6,|L9.84|
00002e  5c30              LDRB     r0,[r6,r0]            ;933
000030  074f              LSLS     r7,r1,#29             ;933
000032  0f7f              LSRS     r7,r7,#29             ;933
000034  2601              MOVS     r6,#1                 ;933
000036  40be              LSLS     r6,r6,r7              ;933
000038  4330              ORRS     r0,r0,r6              ;933
00003a  08ce              LSRS     r6,r1,#3              ;933
00003c  18b6              ADDS     r6,r6,r2              ;933
00003e  4f05              LDR      r7,|L9.84|
000040  55b8              STRB     r0,[r7,r6]            ;933
000042  1c49              ADDS     r1,r1,#1              ;932
                  |L9.68|
000044  42a9              CMP      r1,r5                 ;932
000046  d9ef              BLS      |L9.40|
                  |L9.72|
000048  3220              ADDS     r2,r2,#0x20           ;936
00004a  1c5b              ADDS     r3,r3,#1              ;930
                  |L9.76|
00004c  2b04              CMP      r3,#4                 ;930
00004e  d3e3              BCC      |L9.24|
000050  2001              MOVS     r0,#1                 ;939
000052  e7dd              B        |L9.16|
;;;941     
                          ENDP

                  |L9.84|
                          DCD      EventFilter

                          AREA ||i.EventRecorderInitialize||, CODE, READONLY, ALIGN=2

                  EventRecorderInitialize PROC
;;;813    */
;;;814    uint32_t EventRecorderInitialize (uint32_t recording, uint32_t start) {
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
000002  b083              SUB      sp,sp,#0xc
;;;815      EventRecord_t *record;
;;;816      uint16_t crc;
;;;817      uint32_t freq;
;;;818      uint32_t ret;
;;;819      uint32_t ts;
;;;820      uint32_t n;
;;;821     
;;;822      EventStatus.state = 0U;
000004  2000              MOVS     r0,#0
000006  4942              LDR      r1,|L10.272|
000008  7008              STRB     r0,[r1,#0]
;;;823      memset(&EventFilter[0], 0, sizeof(EventFilter));
00000a  2180              MOVS     r1,#0x80
00000c  4841              LDR      r0,|L10.276|
00000e  f7fffffe          BL       __aeabi_memclr4
;;;824     
;;;825      crc = crc16_ccitt((const uint8_t *)&EventRecorderInfo, sizeof(EventRecorderInfo));
000012  2118              MOVS     r1,#0x18
000014  4840              LDR      r0,|L10.280|
000016  f7fffffe          BL       crc16_ccitt
00001a  9002              STR      r0,[sp,#8]
;;;826     
;;;827      if (EventStatus.signature != SIGNATURE) {
00001c  483c              LDR      r0,|L10.272|
00001e  6a00              LDR      r0,[r0,#0x20]  ; EventStatus
000020  493e              LDR      r1,|L10.284|
000022  4288              CMP      r0,r1
000024  d007              BEQ      |L10.54|
;;;828        EventStatus.signature  = SIGNATURE;
000026  4608              MOV      r0,r1
000028  4939              LDR      r1,|L10.272|
00002a  6208              STR      r0,[r1,#0x20]  ; EventStatus
;;;829        EventStatus.info_crc   = crc;
00002c  9802              LDR      r0,[sp,#8]
00002e  8048              STRH     r0,[r1,#2]
;;;830        EventStatus.init_count = 1U;
000030  2001              MOVS     r0,#1
000032  61c8              STR      r0,[r1,#0x1c]  ; EventStatus
000034  e00f              B        |L10.86|
                  |L10.54|
;;;831      } else {
;;;832        if (EventStatus.info_crc != crc) {
000036  4836              LDR      r0,|L10.272|
000038  8841              LDRH     r1,[r0,#2]  ; EventStatus
00003a  9802              LDR      r0,[sp,#8]
00003c  4281              CMP      r1,r0
00003e  d005              BEQ      |L10.76|
;;;833          EventStatus.info_crc   = crc;
000040  4933              LDR      r1,|L10.272|
000042  9802              LDR      r0,[sp,#8]
000044  8048              STRH     r0,[r1,#2]
;;;834          EventStatus.init_count = 1U;
000046  2001              MOVS     r0,#1
000048  61c8              STR      r0,[r1,#0x1c]  ; EventStatus
00004a  e004              B        |L10.86|
                  |L10.76|
;;;835        } else {
;;;836          EventStatus.init_count++;
00004c  4830              LDR      r0,|L10.272|
00004e  69c0              LDR      r0,[r0,#0x1c]  ; EventStatus
000050  1c40              ADDS     r0,r0,#1
000052  492f              LDR      r1,|L10.272|
000054  61c8              STR      r0,[r1,#0x1c]  ; EventStatus
                  |L10.86|
;;;837        }
;;;838      }
;;;839     
;;;840      if (EventStatus.init_count == 1U) {
000056  482e              LDR      r0,|L10.272|
000058  69c0              LDR      r0,[r0,#0x1c]  ; EventStatus
00005a  2801              CMP      r0,#1
00005c  d10b              BNE      |L10.118|
;;;841        EventStatus.context         = 0U;
00005e  2000              MOVS     r0,#0
000060  492b              LDR      r1,|L10.272|
000062  7048              STRB     r0,[r1,#1]
;;;842        EventStatus.record_index    = 0U;
000064  6048              STR      r0,[r1,#4]  ; EventStatus
;;;843        EventStatus.records_written = 0U;
000066  6088              STR      r0,[r1,#8]  ; EventStatus
;;;844        EventStatus.records_dumped  = 0U;
000068  60c8              STR      r0,[r1,#0xc]  ; EventStatus
;;;845        memset(&EventBuffer[0], 0, sizeof(EventBuffer));
00006a  2101              MOVS     r1,#1
00006c  0289              LSLS     r1,r1,#10
00006e  482c              LDR      r0,|L10.288|
000070  f7fffffe          BL       __aeabi_memclr4
000074  e012              B        |L10.156|
                  |L10.118|
;;;846      } else {
;;;847        for (n = 0U; n < EVENT_RECORD_COUNT; n++) {
000076  2700              MOVS     r7,#0
000078  e00e              B        |L10.152|
                  |L10.122|
;;;848          record = &EventBuffer[n];
00007a  0138              LSLS     r0,r7,#4
00007c  4928              LDR      r1,|L10.288|
00007e  1845              ADDS     r5,r0,r1
;;;849          if ((record->info & EVENT_RECORD_LOCKED) != 0U) {
000080  2101              MOVS     r1,#1
000082  0689              LSLS     r1,r1,#26
000084  68e8              LDR      r0,[r5,#0xc]
000086  4008              ANDS     r0,r0,r1
000088  2800              CMP      r0,#0
00008a  d004              BEQ      |L10.150|
;;;850            record->info &= ~(EVENT_RECORD_LOCKED | EVENT_RECORD_VALID);
00008c  2103              MOVS     r1,#3
00008e  0689              LSLS     r1,r1,#26
000090  68e8              LDR      r0,[r5,#0xc]
000092  4388              BICS     r0,r0,r1
000094  60e8              STR      r0,[r5,#0xc]
                  |L10.150|
000096  1c7f              ADDS     r7,r7,#1              ;847
                  |L10.152|
000098  2f40              CMP      r7,#0x40              ;847
00009a  d3ee              BCC      |L10.122|
                  |L10.156|
;;;851          }
;;;852        }
;;;853      }
;;;854     
;;;855      if (EventStatus.init_count == 1U) {
00009c  481c              LDR      r0,|L10.272|
00009e  69c0              LDR      r0,[r0,#0x1c]  ; EventStatus
0000a0  2801              CMP      r0,#1
0000a2  d110              BNE      |L10.198|
;;;856        ret = EventRecorderTimerSetup();
0000a4  f7fffffe          BL       EventRecorderTimerSetup
0000a8  4604              MOV      r4,r0
;;;857        if (ret != 0U) {
0000aa  2c00              CMP      r4,#0
0000ac  d003              BEQ      |L10.182|
;;;858          #if (defined(EVENT_TIMESTAMP_FREQ) && (EVENT_TIMESTAMP_FREQ != 0U))
;;;859            freq = EVENT_TIMESTAMP_FREQ;
;;;860          #else
;;;861            freq = EventRecorderTimerGetFreq();
0000ae  f7fffffe          BL       EventRecorderTimerGetFreq
0000b2  4606              MOV      r6,r0
0000b4  e000              B        |L10.184|
                  |L10.182|
;;;862          #endif
;;;863        } else {
;;;864          freq = 0U;
0000b6  2600              MOVS     r6,#0
                  |L10.184|
;;;865        }
;;;866        EventStatus.ts_freq     = freq;
0000b8  4815              LDR      r0,|L10.272|
0000ba  6146              STR      r6,[r0,#0x14]  ; EventStatus
;;;867        EventStatus.ts_last     = 0U;
0000bc  2000              MOVS     r0,#0
0000be  4914              LDR      r1,|L10.272|
0000c0  6188              STR      r0,[r1,#0x18]  ; EventStatus
;;;868        EventStatus.ts_overflow = 0U;
0000c2  6108              STR      r0,[r1,#0x10]  ; EventStatus
0000c4  e000              B        |L10.200|
                  |L10.198|
;;;869      } else {
;;;870    #if    (EVENT_TIMESTAMP_SOURCE == 0)
;;;871      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;872        ret = EventRecorderTimerSetup();
;;;873      #else
;;;874        ret = 1U;
0000c6  2401              MOVS     r4,#1
                  |L10.200|
;;;875      #endif
;;;876    #elif ((EVENT_TIMESTAMP_SOURCE >= 1) && (EVENT_TIMESTAMP_SOURCE <= 3))
;;;877        ret = EventRecorderTimerSetup();
;;;878        if (ret != 0U) {
;;;879          #if (defined(EVENT_TIMESTAMP_FREQ) && (EVENT_TIMESTAMP_FREQ != 0U))
;;;880            freq = EVENT_TIMESTAMP_FREQ;
;;;881          #else
;;;882            freq = EventRecorderTimerGetFreq();
;;;883          #endif
;;;884        } else {
;;;885          freq = 0U;
;;;886        }
;;;887        EventStatus.ts_freq     = freq;
;;;888        EventStatus.ts_last     = 0U;
;;;889        EventStatus.ts_overflow = 0U;
;;;890    #else
;;;891        ret = 1U;
;;;892    #endif
;;;893      }
;;;894     
;;;895      if (ret != 0U) {
0000c8  2c00              CMP      r4,#0
0000ca  d01d              BEQ      |L10.264|
;;;896     
;;;897        (void)EventRecorderEnable(recording,      0x00U,            0xFEU);
0000cc  22fe              MOVS     r2,#0xfe
0000ce  2100              MOVS     r1,#0
0000d0  9803              LDR      r0,[sp,#0xc]
0000d2  f7fffffe          BL       EventRecorderEnable
;;;898        (void)EventRecorderEnable(EventRecordAll, EvtStatistics_No, EvtStatistics_No);
0000d6  22ef              MOVS     r2,#0xef
0000d8  4611              MOV      r1,r2
0000da  200f              MOVS     r0,#0xf
0000dc  f7fffffe          BL       EventRecorderEnable
;;;899        (void)EventRecorderEnable(EventRecordOp,  EvtPrintf_No,     EvtPrintf_No);
0000e0  22fe              MOVS     r2,#0xfe
0000e2  4611              MOV      r1,r2
0000e4  2004              MOVS     r0,#4
0000e6  f7fffffe          BL       EventRecorderEnable
;;;900     
;;;901        ts = EventGetTS();
0000ea  f7fffffe          BL       EventGetTS
0000ee  9001              STR      r0,[sp,#4]
;;;902     
;;;903        (void)EventRecordItem(ID_EVENT_INIT, ts, EventStatus.init_count, 0U);
0000f0  4807              LDR      r0,|L10.272|
0000f2  2300              MOVS     r3,#0
0000f4  69c2              LDR      r2,[r0,#0x1c]  ; EventStatus
0000f6  480b              LDR      r0,|L10.292|
0000f8  9901              LDR      r1,[sp,#4]
0000fa  f7fffffe          BL       EventRecordItem
;;;904     
;;;905        if (start != 0U) {
0000fe  9804              LDR      r0,[sp,#0x10]
000100  2800              CMP      r0,#0
000102  d001              BEQ      |L10.264|
;;;906          (void)EventRecorderStart();
000104  f7fffffe          BL       EventRecorderStart
                  |L10.264|
;;;907        }
;;;908      }
;;;909     
;;;910      return (ret);
000108  4620              MOV      r0,r4
;;;911    }
00010a  b005              ADD      sp,sp,#0x14
00010c  bdf0              POP      {r4-r7,pc}
;;;912     
                          ENDP

00010e  0000              DCW      0x0000
                  |L10.272|
                          DCD      EventStatus
                  |L10.276|
                          DCD      EventFilter
                  |L10.280|
                          DCD      EventRecorderInfo
                  |L10.284|
                          DCD      0xe1a5276b
                  |L10.288|
                          DCD      EventBuffer
                  |L10.292|
                          DCD      0x0300ff00

                          AREA ||i.EventRecorderStart||, CODE, READONLY, ALIGN=2

                  EventRecorderStart PROC
;;;974    */
;;;975    uint32_t EventRecorderStart (void) {
000000  b510              PUSH     {r4,lr}
;;;976      uint32_t ts;
;;;977     
;;;978      if (EventStatus.state != 0U) {
000002  480a              LDR      r0,|L11.44|
000004  7800              LDRB     r0,[r0,#0]  ; EventStatus
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L11.14|
;;;979        //lint -e{904} "Return statement before end of function"
;;;980        return 1U;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;981      }
;;;982      EventStatus.state = 1U;
;;;983     
;;;984      ts = EventGetTS();
;;;985     
;;;986      (void)EventRecordItem(ID_EVENT_START, ts, 0U, 0U);
;;;987     
;;;988      return 1U;
;;;989    }
00000c  bd10              POP      {r4,pc}
                  |L11.14|
00000e  2001              MOVS     r0,#1                 ;982
000010  4906              LDR      r1,|L11.44|
000012  7008              STRB     r0,[r1,#0]            ;982
000014  f7fffffe          BL       EventGetTS
000018  4604              MOV      r4,r0                 ;984
00001a  2300              MOVS     r3,#0                 ;986
00001c  461a              MOV      r2,r3                 ;986
00001e  4621              MOV      r1,r4                 ;986
000020  4803              LDR      r0,|L11.48|
000022  f7fffffe          BL       EventRecordItem
000026  2001              MOVS     r0,#1                 ;988
000028  e7f0              B        |L11.12|
;;;990     
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      EventStatus
                  |L11.48|
                          DCD      0x0300ff01

                          AREA ||i.EventRecorderStop||, CODE, READONLY, ALIGN=2

                  EventRecorderStop PROC
;;;994    */
;;;995    uint32_t EventRecorderStop (void) {
000000  b510              PUSH     {r4,lr}
;;;996      uint32_t ts;
;;;997     
;;;998      if (EventStatus.state == 0U) {
000002  480a              LDR      r0,|L12.44|
000004  7800              LDRB     r0,[r0,#0]  ; EventStatus
000006  2800              CMP      r0,#0
000008  d101              BNE      |L12.14|
;;;999        //lint -e{904} "Return statement before end of function"
;;;1000       return 1U;
00000a  2001              MOVS     r0,#1
                  |L12.12|
;;;1001     }
;;;1002     EventStatus.state = 0U;
;;;1003    
;;;1004     ts = EventGetTS();
;;;1005    
;;;1006     (void)EventRecordItem(ID_EVENT_STOP, ts, 0U, 0U);
;;;1007    
;;;1008     return 1U;
;;;1009   }
00000c  bd10              POP      {r4,pc}
                  |L12.14|
00000e  2000              MOVS     r0,#0                 ;1002
000010  4906              LDR      r1,|L12.44|
000012  7008              STRB     r0,[r1,#0]            ;1002
000014  f7fffffe          BL       EventGetTS
000018  4604              MOV      r4,r0                 ;1004
00001a  2300              MOVS     r3,#0                 ;1006
00001c  461a              MOV      r2,r3                 ;1006
00001e  4621              MOV      r1,r4                 ;1006
000020  4803              LDR      r0,|L12.48|
000022  f7fffffe          BL       EventRecordItem
000026  2001              MOVS     r0,#1                 ;1008
000028  e7f0              B        |L12.12|
;;;1010    
                          ENDP

00002a  0000              DCW      0x0000
                  |L12.44|
                          DCD      EventStatus
                  |L12.48|
                          DCD      0x0300ff02

                          AREA ||i.EventRecorderTimerGetCount||, CODE, READONLY, ALIGN=2

                  EventRecorderTimerGetCount PROC
;;;784    #if (EVENT_TIMESTAMP_SOURCE < 3)
;;;785    __WEAK uint32_t EventRecorderTimerGetCount (void) {
000000  4803              LDR      r0,|L13.16|
;;;786    #if   (EVENT_TIMESTAMP_SOURCE == 0)
;;;787      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;788        return (DWT->CYCCNT);
;;;789      #else
;;;790        return (TimeStamp++);
000002  6800              LDR      r0,[r0,#0]  ; TimeStamp
000004  4902              LDR      r1,|L13.16|
000006  6809              LDR      r1,[r1,#0]  ; TimeStamp
000008  1c49              ADDS     r1,r1,#1
00000a  4a01              LDR      r2,|L13.16|
00000c  6011              STR      r1,[r2,#0]  ; TimeStamp
;;;791      #endif
;;;792    #elif (EVENT_TIMESTAMP_SOURCE == 1)
;;;793      return (SysTickGetCount());
;;;794    #elif (EVENT_TIMESTAMP_SOURCE == 2)
;;;795      uint32_t count;
;;;796     
;;;797      if (SysTimerIsRunning() != 0U) {
;;;798        count = osKernelGetSysTimerCount();
;;;799      } else {
;;;800        count = 0U;
;;;801      }
;;;802      return (count);
;;;803    #endif
;;;804    }
00000e  4770              BX       lr
;;;805    #endif
                          ENDP

                  |L13.16|
                          DCD      TimeStamp

                          AREA ||i.EventRecorderTimerGetFreq||, CODE, READONLY, ALIGN=1

                  EventRecorderTimerGetFreq PROC
;;;757    #if (EVENT_TIMESTAMP_SOURCE < 3)
;;;758    __WEAK uint32_t EventRecorderTimerGetFreq (void) {
000000  2000              MOVS     r0,#0
;;;759    #if   (EVENT_TIMESTAMP_SOURCE == 0)
;;;760      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;761        return (SystemCoreClock);
;;;762      #else
;;;763        return 0U;
;;;764      #endif
;;;765    #elif (EVENT_TIMESTAMP_SOURCE == 1)
;;;766      return (SysTickGetFreq());
;;;767    #elif (EVENT_TIMESTAMP_SOURCE == 2)
;;;768      uint32_t freq;
;;;769     
;;;770      if (SysTimerIsRunning() != 0U) {
;;;771        freq = osKernelGetSysTimerFreq();
;;;772      } else {
;;;773        freq = 0U;
;;;774      }
;;;775      return (freq);
;;;776    #endif
;;;777    }
000002  4770              BX       lr
;;;778    #endif
                          ENDP


                          AREA ||i.EventRecorderTimerSetup||, CODE, READONLY, ALIGN=2

                  EventRecorderTimerSetup PROC
;;;733    #if (EVENT_TIMESTAMP_SOURCE < 3)
;;;734    __WEAK uint32_t EventRecorderTimerSetup (void) {
000000  2000              MOVS     r0,#0
;;;735    #if   (EVENT_TIMESTAMP_SOURCE == 0)
;;;736      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;737        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
;;;738        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
;;;739        return 1U;
;;;740      #else
;;;741        TimeStamp = 0U;
000002  4902              LDR      r1,|L15.12|
000004  6008              STR      r0,[r1,#0]  ; TimeStamp
;;;742        return 1U;
000006  2001              MOVS     r0,#1
;;;743      #endif
;;;744    #elif (EVENT_TIMESTAMP_SOURCE == 1)
;;;745      return (SysTickSetup());
;;;746    #elif (EVENT_TIMESTAMP_SOURCE == 2)
;;;747      SysTimerState = 0U;
;;;748      return 1U;
;;;749    #endif
;;;750    }
000008  4770              BX       lr
;;;751    #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      TimeStamp

                          AREA ||i.GetContext||, CODE, READONLY, ALIGN=2

                  GetContext PROC
;;;350     
;;;351    __STATIC_INLINE uint32_t GetContext (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;352      return ((uint32_t)atomic_inc8(&EventStatus.context));
000002  4c06              LDR      r4,|L16.28|
000004  f7fffffe          BL       __get_PRIMASK
000008  4606              MOV      r6,r0
00000a  b672              CPSID    i
00000c  7825              LDRB     r5,[r4,#0]
00000e  1c68              ADDS     r0,r5,#1
000010  7020              STRB     r0,[r4,#0]
000012  2e00              CMP      r6,#0
000014  d100              BNE      |L16.24|
000016  b662              CPSIE    i
                  |L16.24|
000018  4628              MOV      r0,r5
;;;353    }
00001a  bd70              POP      {r4-r6,pc}
;;;354     
                          ENDP

                  |L16.28|
                          DCD      EventStatus+0x1

                          AREA ||i.__get_PRIMASK||, CODE, READONLY, ALIGN=1

                  __get_PRIMASK PROC
;;;234     */
;;;235    __STATIC_INLINE uint32_t __get_PRIMASK(void)
000000  f3ef8010          MRS      r0,PRIMASK
;;;236    {
;;;237      register uint32_t __regPriMask         __ASM("primask");
;;;238      return(__regPriMask);
;;;239    }
000004  4770              BX       lr
;;;240    
                          ENDP


                          AREA ||i.atomic_inc32||, CODE, READONLY, ALIGN=1

                  atomic_inc32 PROC
;;;204     
;;;205    __STATIC_INLINE uint32_t atomic_inc32 (uint32_t *mem) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;206      uint32_t primask = __get_PRIMASK();
000004  f7fffffe          BL       __get_PRIMASK
000008  4606              MOV      r6,r0
;;;207      uint32_t ret;
;;;208     
;;;209      __disable_irq();
00000a  b672              CPSID    i
;;;210      ret = *mem;
00000c  6825              LDR      r5,[r4,#0]
;;;211      *mem = ret + 1U;
00000e  1c68              ADDS     r0,r5,#1
000010  6020              STR      r0,[r4,#0]
;;;212      if (primask == 0U) {
000012  2e00              CMP      r6,#0
000014  d100              BNE      |L18.24|
;;;213        __enable_irq();
000016  b662              CPSIE    i
                  |L18.24|
;;;214      }
;;;215     
;;;216      return ret;
000018  4628              MOV      r0,r5
;;;217    }
00001a  bd70              POP      {r4-r6,pc}
;;;218     
                          ENDP


                          AREA ||i.crc16_ccitt||, CODE, READONLY, ALIGN=2

                  crc16_ccitt PROC
;;;633    */
;;;634    static uint16_t crc16_ccitt (const uint8_t *data, uint32_t len) {
000000  b530              PUSH     {r4,r5,lr}
000002  4602              MOV      r2,r0
;;;635      uint16_t crc;
;;;636      uint32_t n;
;;;637     
;;;638      crc = 0xFFFFU;
000004  480d              LDR      r0,|L19.60|
;;;639      while (len != 0U) {
000006  e015              B        |L19.52|
                  |L19.8|
;;;640        //lint -e{9049} "increment/decrement operation combined with other operation"
;;;641        crc ^= ((uint16_t)*data++ << 8);
000008  7815              LDRB     r5,[r2,#0]
00000a  1c52              ADDS     r2,r2,#1
00000c  022c              LSLS     r4,r5,#8
00000e  4060              EORS     r0,r0,r4
;;;642        for (n = 8U; n != 0U; n--) {
000010  2308              MOVS     r3,#8
000012  e00c              B        |L19.46|
                  |L19.20|
;;;643          if ((crc & 0x8000U) != 0U) {
000014  2401              MOVS     r4,#1
000016  03e4              LSLS     r4,r4,#15
000018  4004              ANDS     r4,r4,r0
00001a  2c00              CMP      r4,#0
00001c  d004              BEQ      |L19.40|
;;;644            crc <<= 1;
00001e  0444              LSLS     r4,r0,#17
000020  0c20              LSRS     r0,r4,#16
;;;645            crc  ^= 0x1021U;
000022  4c07              LDR      r4,|L19.64|
000024  4060              EORS     r0,r0,r4
000026  e001              B        |L19.44|
                  |L19.40|
;;;646          } else {
;;;647            crc <<= 1;
000028  0444              LSLS     r4,r0,#17
00002a  0c20              LSRS     r0,r4,#16
                  |L19.44|
00002c  1e5b              SUBS     r3,r3,#1              ;642
                  |L19.46|
00002e  2b00              CMP      r3,#0                 ;642
000030  d1f0              BNE      |L19.20|
;;;648          }
;;;649        }
;;;650        len--;
000032  1e49              SUBS     r1,r1,#1
                  |L19.52|
000034  2900              CMP      r1,#0                 ;639
000036  d1e7              BNE      |L19.8|
;;;651      }
;;;652     
;;;653      return (crc);
;;;654    }
000038  bd30              POP      {r4,r5,pc}
;;;655     
                          ENDP

00003a  0000              DCW      0x0000
                  |L19.60|
                          DCD      0x0000ffff
                  |L19.64|
                          DCD      0x00001021

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=6

                  EventBuffer
                          %        1024
                  EventFilter
                          %        128
                  EventStatus
                          %        36
                  TimeStamp
                          %        4

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  EventRecorderInfo
                  ||__tagsym$$used||
000000  0100              DCB      0x01,0x00
000002  0101              DCW      0x0101
                          DCD      0x00000040
                          DCD      EventBuffer
                          DCD      EventFilter
                          DCD      EventStatus
000014  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\ARM_Compiler\\1.6.2\\Source\\EventRecorder.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c____REV16|
#line 465 ".\\_CMSIS\\v5.20\\Include\\cmsis_armcc.h"
|__asm___15_EventRecorder_c_e8d3082c____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c____REVSH|
#line 480
|__asm___15_EventRecorder_c_e8d3082c____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
