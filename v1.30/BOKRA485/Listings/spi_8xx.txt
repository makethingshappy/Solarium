; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\spi_8xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi_8xx.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.30\BOKRA485\RTE -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\spi_8xx.crf lpc_chip_82x\src\spi_8xx.c]
                          THUMB

                          AREA ||i.Chip_SPI_CalClkRateDivider||, CODE, READONLY, ALIGN=1

                  Chip_SPI_CalClkRateDivider PROC
;;;94     /* Calculate the Clock Rate Divider for SPI Peripheral */
;;;95     uint32_t Chip_SPI_CalClkRateDivider(LPC_SPI_T *pSPI, uint32_t bitRate)
000000  b5f8              PUSH     {r3-r7,lr}
;;;96     {
000002  4607              MOV      r7,r0
000004  460c              MOV      r4,r1
;;;97     	uint32_t SPIClk;
;;;98     	uint32_t DivVal = 1;
000006  2501              MOVS     r5,#1
;;;99     
;;;100    	/* Get SPI clock rate */
;;;101    	SPIClk = Chip_Clock_GetSystemClockRate();	/*The peripheral clock for both SPIs is the system clock*/
000008  f7fffffe          BL       Chip_Clock_GetSystemClockRate
00000c  4606              MOV      r6,r0
;;;102    
;;;103    	DivVal = SPIClk / bitRate;
00000e  4621              MOV      r1,r4
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       __aeabi_uidivmod
000016  4605              MOV      r5,r0
;;;104    
;;;105    	return DivVal;
000018  4628              MOV      r0,r5
;;;106    }
00001a  bdf8              POP      {r3-r7,pc}
;;;107    
                          ENDP


                          AREA ||i.Chip_SPI_ClearStatus||, CODE, READONLY, ALIGN=1

                  Chip_SPI_ClearStatus PROC
;;;408     */
;;;409    STATIC INLINE void Chip_SPI_ClearStatus(LPC_SPI_T *pSPI, uint32_t Flag)
000000  6081              STR      r1,[r0,#8]
;;;410    {
;;;411    	pSPI->STAT = Flag;
;;;412    }
000002  4770              BX       lr
;;;413    
                          ENDP


                          AREA ||i.Chip_SPI_DelayConfig||, CODE, READONLY, ALIGN=1

                  Chip_SPI_DelayConfig PROC
;;;108    /* Configure SPI Delay parameters */
;;;109    void Chip_SPI_DelayConfig(LPC_SPI_T *pSPI, SPI_DELAY_CONFIG_T *pConfig)
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	uint32_t delayValue = SPI_DLY_PRE_DELAY(pConfig->PreDelay) |
000002  780b              LDRB     r3,[r1,#0]
000004  071b              LSLS     r3,r3,#28
000006  0f1b              LSRS     r3,r3,#28
000008  784c              LDRB     r4,[r1,#1]
00000a  0724              LSLS     r4,r4,#28
00000c  0e24              LSRS     r4,r4,#24
00000e  4323              ORRS     r3,r3,r4
000010  788c              LDRB     r4,[r1,#2]
000012  0724              LSLS     r4,r4,#28
000014  0d24              LSRS     r4,r4,#20
000016  4323              ORRS     r3,r3,r4
000018  461a              MOV      r2,r3
;;;112    		SPI_DLY_POST_DELAY(pConfig->PostDelay)                 |
;;;113    		SPI_DLY_FRAME_DELAY(pConfig->FrameDelay);
;;;114    	if (pConfig->TransferDelay) {
00001a  78cb              LDRB     r3,[r1,#3]
00001c  2b00              CMP      r3,#0
00001e  d004              BEQ      |L3.42|
;;;115    		delayValue |= SPI_DLY_TRANSFER_DELAY(pConfig->TransferDelay - 1);
000020  78cb              LDRB     r3,[r1,#3]
000022  1e5b              SUBS     r3,r3,#1
000024  071b              LSLS     r3,r3,#28
000026  0c1b              LSRS     r3,r3,#16
000028  431a              ORRS     r2,r2,r3
                  |L3.42|
;;;116    	}
;;;117    	pSPI->DLY = delayValue;
00002a  6042              STR      r2,[r0,#4]
;;;118    }
00002c  bd10              POP      {r4,pc}
;;;119    
                          ENDP


                          AREA ||i.Chip_SPI_GetStatus||, CODE, READONLY, ALIGN=1

                  Chip_SPI_GetStatus PROC
;;;395     */
;;;396    STATIC INLINE uint32_t Chip_SPI_GetStatus(LPC_SPI_T *pSPI)
000000  4601              MOV      r1,r0
;;;397    {
;;;398    	return pSPI->STAT & ~SPI_STAT_RESERVED;
000002  6888              LDR      r0,[r1,#8]
000004  05c0              LSLS     r0,r0,#23
000006  0dc0              LSRS     r0,r0,#23
;;;399    }
000008  4770              BX       lr
;;;400    
                          ENDP


                          AREA ||i.Chip_SPI_Int_Cmd||, CODE, READONLY, ALIGN=1

                  Chip_SPI_Int_Cmd PROC
;;;120    /* Disable/Enable Interrupt */
;;;121    void Chip_SPI_Int_Cmd(LPC_SPI_T *pSPI, uint32_t IntMask, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;122    {
;;;123    	if (NewState ==  ENABLE) {
000002  d101              BNE      |L5.8|
;;;124    		pSPI->INTENSET = IntMask;
000004  60c1              STR      r1,[r0,#0xc]
000006  e000              B        |L5.10|
                  |L5.8|
;;;125    	}
;;;126    	else {
;;;127    		pSPI->INTENCLR = IntMask;
000008  6101              STR      r1,[r0,#0x10]
                  |L5.10|
;;;128    	}
;;;129    }
00000a  4770              BX       lr
;;;130    
                          ENDP


                          AREA ||i.Chip_SPI_Int_RWFrames||, CODE, READONLY, ALIGN=1

                  Chip_SPI_Int_RWFrames PROC
;;;210    /* SPI Interrupt Read/Write with 8-bit frame width */
;;;211    Status Chip_SPI_Int_RWFrames(LPC_SPI_T *pSPI, SPI_DATA_SETUP_T *pXfSetup)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;213    	uint32_t Status;
;;;214    
;;;215    	Status = Chip_SPI_GetStatus(pSPI);
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       Chip_SPI_GetStatus
00000c  4605              MOV      r5,r0
;;;216    	/* Check  error in INTSTAT register */
;;;217    	if (Status & (SPI_STAT_RXOV | SPI_STAT_TXUR)) {
00000e  200c              MOVS     r0,#0xc
000010  4028              ANDS     r0,r0,r5
000012  2800              CMP      r0,#0
000014  d001              BEQ      |L6.26|
;;;218    		return ERROR;
000016  2000              MOVS     r0,#0
                  |L6.24|
;;;219    	}
;;;220    
;;;221    	if (pXfSetup->TxCnt == 0) {
;;;222    		Chip_SPI_SetControlInfo(pSPI, pXfSetup->DataSize, SPI_TXCTL_ASSERT_SSEL | SPI_TXCTL_EOF);
;;;223    	}
;;;224    
;;;225    	if (pXfSetup->pRx == NULL) {
;;;226    		if ((Status & SPI_STAT_TXRDY) && (pXfSetup->TxCnt < pXfSetup->Length)) {
;;;227    			SPI_Send_Data_RxIgnore(pSPI, pXfSetup);
;;;228    		}
;;;229    	}
;;;230    	else {
;;;231    		/* check if Tx ready */
;;;232    		if ((Status & SPI_STAT_TXRDY) && (pXfSetup->TxCnt < pXfSetup->Length)) {
;;;233    			SPI_Send_Data(pSPI, pXfSetup);
;;;234    		}
;;;235    
;;;236    		/* check if RX FIFO contains data */
;;;237    		if ((Status & SPI_STAT_RXRDY) && (pXfSetup->RxCnt < pXfSetup->Length)) {
;;;238    			SPI_Receive_Data(pSPI, pXfSetup);
;;;239    		}
;;;240    	}
;;;241    
;;;242    	return SUCCESS;
;;;243    }
000018  bd70              POP      {r4-r6,pc}
                  |L6.26|
00001a  6860              LDR      r0,[r4,#4]            ;221
00001c  2800              CMP      r0,#0                 ;221
00001e  d105              BNE      |L6.44|
000020  7d21              LDRB     r1,[r4,#0x14]         ;222
000022  2201              MOVS     r2,#1                 ;222
000024  0552              LSLS     r2,r2,#21             ;222
000026  4630              MOV      r0,r6                 ;222
000028  f7fffffe          BL       Chip_SPI_SetControlInfo
                  |L6.44|
00002c  68a0              LDR      r0,[r4,#8]            ;225
00002e  2800              CMP      r0,#0                 ;225
000030  d10c              BNE      |L6.76|
000032  2002              MOVS     r0,#2                 ;226
000034  4028              ANDS     r0,r0,r5              ;226
000036  2800              CMP      r0,#0                 ;226
000038  d020              BEQ      |L6.124|
00003a  6921              LDR      r1,[r4,#0x10]         ;226
00003c  6860              LDR      r0,[r4,#4]            ;226
00003e  4288              CMP      r0,r1                 ;226
000040  d21c              BCS      |L6.124|
000042  4621              MOV      r1,r4                 ;227
000044  4630              MOV      r0,r6                 ;227
000046  f7fffffe          BL       SPI_Send_Data_RxIgnore
00004a  e017              B        |L6.124|
                  |L6.76|
00004c  2002              MOVS     r0,#2                 ;232
00004e  4028              ANDS     r0,r0,r5              ;232
000050  2800              CMP      r0,#0                 ;232
000052  d007              BEQ      |L6.100|
000054  6921              LDR      r1,[r4,#0x10]         ;232
000056  6860              LDR      r0,[r4,#4]            ;232
000058  4288              CMP      r0,r1                 ;232
00005a  d203              BCS      |L6.100|
00005c  4621              MOV      r1,r4                 ;233
00005e  4630              MOV      r0,r6                 ;233
000060  f7fffffe          BL       SPI_Send_Data
                  |L6.100|
000064  07e8              LSLS     r0,r5,#31             ;237
000066  0fc0              LSRS     r0,r0,#31             ;237
000068  2800              CMP      r0,#0                 ;237
00006a  d007              BEQ      |L6.124|
00006c  6921              LDR      r1,[r4,#0x10]         ;237
00006e  68e0              LDR      r0,[r4,#0xc]          ;237
000070  4288              CMP      r0,r1                 ;237
000072  d203              BCS      |L6.124|
000074  4621              MOV      r1,r4                 ;238
000076  4630              MOV      r0,r6                 ;238
000078  f7fffffe          BL       SPI_Receive_Data
                  |L6.124|
00007c  2001              MOVS     r0,#1                 ;242
00007e  e7cb              B        |L6.24|
                          ENDP


                          AREA ||i.Chip_SPI_RWFrames_Blocking||, CODE, READONLY, ALIGN=1

                  Chip_SPI_RWFrames_Blocking PROC
;;;131    /*Send and Receive SPI Data  */
;;;132    uint32_t Chip_SPI_RWFrames_Blocking(LPC_SPI_T *pSPI, SPI_DATA_SETUP_T *pXfSetup)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;134    	uint32_t Status;
;;;135    	/* Clear status */
;;;136    	Chip_SPI_ClearStatus(pSPI, SPI_STAT_CLR_RXOV | SPI_STAT_CLR_TXUR | SPI_STAT_CLR_SSA | SPI_STAT_CLR_SSD);
000006  213c              MOVS     r1,#0x3c
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       Chip_SPI_ClearStatus
;;;137    	Chip_SPI_SetControlInfo(pSPI, pXfSetup->DataSize, SPI_TXCTL_ASSERT_SSEL | SPI_TXCTL_EOF);
00000e  7d21              LDRB     r1,[r4,#0x14]
000010  2201              MOVS     r2,#1
000012  0552              LSLS     r2,r2,#21
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       Chip_SPI_SetControlInfo
;;;138    	pXfSetup->TxCnt = pXfSetup->RxCnt = 0;
00001a  2000              MOVS     r0,#0
00001c  60e0              STR      r0,[r4,#0xc]
00001e  6060              STR      r0,[r4,#4]
;;;139    	while ((pXfSetup->TxCnt < pXfSetup->Length) ||
000020  e01b              B        |L7.90|
                  |L7.34|
;;;140    		   (pXfSetup->RxCnt < pXfSetup->Length)) {
;;;141    		Status = Chip_SPI_GetStatus(pSPI);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       Chip_SPI_GetStatus
000028  4605              MOV      r5,r0
;;;142    
;;;143    		/* In case of TxReady */
;;;144    		if ((Status & SPI_STAT_TXRDY) && (pXfSetup->TxCnt < pXfSetup->Length)) {
00002a  2002              MOVS     r0,#2
00002c  4028              ANDS     r0,r0,r5
00002e  2800              CMP      r0,#0
000030  d007              BEQ      |L7.66|
000032  6921              LDR      r1,[r4,#0x10]
000034  6860              LDR      r0,[r4,#4]
000036  4288              CMP      r0,r1
000038  d203              BCS      |L7.66|
;;;145    			SPI_Send_Data(pSPI, pXfSetup);
00003a  4621              MOV      r1,r4
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       SPI_Send_Data
                  |L7.66|
;;;146    		}
;;;147    
;;;148    		/*In case of Rx ready */
;;;149    		if ((Status & SPI_STAT_RXRDY) && (pXfSetup->RxCnt < pXfSetup->Length)) {
000042  07e8              LSLS     r0,r5,#31
000044  0fc0              LSRS     r0,r0,#31
000046  2800              CMP      r0,#0
000048  d007              BEQ      |L7.90|
00004a  6921              LDR      r1,[r4,#0x10]
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  4288              CMP      r0,r1
000050  d203              BCS      |L7.90|
;;;150    			SPI_Receive_Data(pSPI, pXfSetup);
000052  4621              MOV      r1,r4
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       SPI_Receive_Data
                  |L7.90|
00005a  6921              LDR      r1,[r4,#0x10]         ;139
00005c  6860              LDR      r0,[r4,#4]            ;139
00005e  4288              CMP      r0,r1                 ;139
000060  d3df              BCC      |L7.34|
000062  6921              LDR      r1,[r4,#0x10]         ;140
000064  68e0              LDR      r0,[r4,#0xc]          ;140
000066  4288              CMP      r0,r1                 ;140
000068  d3db              BCC      |L7.34|
;;;151    		}
;;;152    	}
;;;153    	/* Check error */
;;;154    	if (Chip_SPI_GetStatus(pSPI) & (SPI_STAT_CLR_RXOV | SPI_STAT_CLR_TXUR)) {
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       Chip_SPI_GetStatus
000070  210c              MOVS     r1,#0xc
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d001              BEQ      |L7.124|
;;;155    		return 0;
000078  2000              MOVS     r0,#0
                  |L7.122|
;;;156    	}
;;;157    	return pXfSetup->TxCnt;
;;;158    }
00007a  bd70              POP      {r4-r6,pc}
                  |L7.124|
00007c  6860              LDR      r0,[r4,#4]            ;157
00007e  e7fc              B        |L7.122|
;;;159    
                          ENDP


                          AREA ||i.Chip_SPI_ReadFrames_Blocking||, CODE, READONLY, ALIGN=1

                  Chip_SPI_ReadFrames_Blocking PROC
;;;184    
;;;185    uint32_t Chip_SPI_ReadFrames_Blocking(LPC_SPI_T *pSPI, SPI_DATA_SETUP_T *pXfSetup)
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;187    	/* Clear status */
;;;188    	Chip_SPI_ClearStatus(pSPI, SPI_STAT_CLR_RXOV | SPI_STAT_CLR_TXUR | SPI_STAT_CLR_SSA | SPI_STAT_CLR_SSD);
000006  213c              MOVS     r1,#0x3c
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       Chip_SPI_ClearStatus
;;;189    	Chip_SPI_SetControlInfo(pSPI, pXfSetup->DataSize, SPI_TXCTL_ASSERT_SSEL | SPI_TXCTL_EOF);
00000e  7d21              LDRB     r1,[r4,#0x14]
000010  2201              MOVS     r2,#1
000012  0552              LSLS     r2,r2,#21
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       Chip_SPI_SetControlInfo
;;;190    	pXfSetup->TxCnt = pXfSetup->RxCnt = 0;
00001a  2000              MOVS     r0,#0
00001c  60e0              STR      r0,[r4,#0xc]
00001e  6060              STR      r0,[r4,#4]
;;;191    	while (pXfSetup->RxCnt < pXfSetup->Length) {
000020  e017              B        |L8.82|
                  |L8.34|
;;;192    		/* Wait for TxReady */
;;;193    		while (!(Chip_SPI_GetStatus(pSPI) & SPI_STAT_TXRDY)) {}
000022  bf00              NOP      
                  |L8.36|
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       Chip_SPI_GetStatus
00002a  2102              MOVS     r1,#2
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d0f8              BEQ      |L8.36|
;;;194    
;;;195    		SPI_Send_Dummy(pSPI, pXfSetup);
000032  4621              MOV      r1,r4
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       SPI_Send_Dummy
;;;196    
;;;197    		/* Wait for receive data */
;;;198    		while (!(Chip_SPI_GetStatus(pSPI) & SPI_STAT_RXRDY)) {}
00003a  bf00              NOP      
                  |L8.60|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       Chip_SPI_GetStatus
000042  07c0              LSLS     r0,r0,#31
000044  0fc0              LSRS     r0,r0,#31
000046  2800              CMP      r0,#0
000048  d0f8              BEQ      |L8.60|
;;;199    
;;;200    		SPI_Receive_Data(pSPI, pXfSetup);
00004a  4621              MOV      r1,r4
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       SPI_Receive_Data
                  |L8.82|
000052  6921              LDR      r1,[r4,#0x10]         ;191
000054  68e0              LDR      r0,[r4,#0xc]          ;191
000056  4288              CMP      r0,r1                 ;191
000058  d3e3              BCC      |L8.34|
;;;201    
;;;202    	}
;;;203    	/* Check overrun error */
;;;204    	if (Chip_SPI_GetStatus(pSPI) & (SPI_STAT_CLR_RXOV | SPI_STAT_CLR_TXUR)) {
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       Chip_SPI_GetStatus
000060  210c              MOVS     r1,#0xc
000062  4008              ANDS     r0,r0,r1
000064  2800              CMP      r0,#0
000066  d001              BEQ      |L8.108|
;;;205    		return 0;
000068  2000              MOVS     r0,#0
                  |L8.106|
;;;206    	}
;;;207    	return pXfSetup->RxCnt;
;;;208    }
00006a  bd70              POP      {r4-r6,pc}
                  |L8.108|
00006c  68e0              LDR      r0,[r4,#0xc]          ;207
00006e  e7fc              B        |L8.106|
;;;209    
                          ENDP


                          AREA ||i.Chip_SPI_SendLastFrame||, CODE, READONLY, ALIGN=1

                  Chip_SPI_SendLastFrame PROC
;;;222     */
;;;223    STATIC INLINE void Chip_SPI_SendLastFrame(LPC_SPI_T *pSPI, uint16_t Data, uint8_t DataSize)
000000  b510              PUSH     {r4,lr}
;;;224    {
;;;225    	pSPI->TXDATCTL = SPI_TXDATCTL_ASSERT_SSEL | SPI_TXDATCTL_EOF | SPI_TXDATCTL_EOT |
000002  1e53              SUBS     r3,r2,#1
000004  071b              LSLS     r3,r3,#28
000006  091b              LSRS     r3,r3,#4
000008  2403              MOVS     r4,#3
00000a  0524              LSLS     r4,r4,#20
00000c  4323              ORRS     r3,r3,r4
00000e  b28c              UXTH     r4,r1
000010  4323              ORRS     r3,r3,r4
000012  6183              STR      r3,[r0,#0x18]
;;;226    					 SPI_TXDATCTL_FLEN(DataSize - 1) | SPI_TXDATCTL_DATA(Data);
;;;227    }
000014  bd10              POP      {r4,pc}
;;;228    
                          ENDP


                          AREA ||i.Chip_SPI_SendMidFrame||, CODE, READONLY, ALIGN=1

                  Chip_SPI_SendMidFrame PROC
;;;197     */
;;;198    STATIC INLINE void Chip_SPI_SendMidFrame(LPC_SPI_T *pSPI, uint16_t Data)
000000  b28a              UXTH     r2,r1
;;;199    {
;;;200    	pSPI->TXDAT = SPI_TXDAT_DATA(Data);
000002  61c2              STR      r2,[r0,#0x1c]
;;;201    }
000004  4770              BX       lr
;;;202    
                          ENDP


                          AREA ||i.Chip_SPI_SetControlInfo||, CODE, READONLY, ALIGN=1

                  Chip_SPI_SetControlInfo PROC
;;;160     */
;;;161    STATIC INLINE void Chip_SPI_SetControlInfo(LPC_SPI_T *pSPI, uint8_t Flen, uint32_t Flag)
000000  1e4b              SUBS     r3,r1,#1
;;;162    {
;;;163    	pSPI->TXCTRL = Flag | SPI_TXDATCTL_FLEN(Flen - 1);
000002  071b              LSLS     r3,r3,#28
000004  091b              LSRS     r3,r3,#4
000006  4313              ORRS     r3,r3,r2
000008  6203              STR      r3,[r0,#0x20]
;;;164    }
00000a  4770              BX       lr
;;;165    
                          ENDP


                          AREA ||i.Chip_SPI_WriteFrames_Blocking||, CODE, READONLY, ALIGN=1

                  Chip_SPI_WriteFrames_Blocking PROC
;;;159    
;;;160    uint32_t Chip_SPI_WriteFrames_Blocking(LPC_SPI_T *pSPI, SPI_DATA_SETUP_T *pXfSetup)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	/* Clear status */
;;;163    	Chip_SPI_ClearStatus(pSPI, SPI_STAT_CLR_RXOV | SPI_STAT_CLR_TXUR | SPI_STAT_CLR_SSA | SPI_STAT_CLR_SSD);
000006  213c              MOVS     r1,#0x3c
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       Chip_SPI_ClearStatus
;;;164    	Chip_SPI_SetControlInfo(pSPI, pXfSetup->DataSize, SPI_TXCTL_ASSERT_SSEL | SPI_TXCTL_EOF | SPI_TXCTL_RXIGNORE);
00000e  7d21              LDRB     r1,[r4,#0x14]
000010  2203              MOVS     r2,#3
000012  0552              LSLS     r2,r2,#21
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       Chip_SPI_SetControlInfo
;;;165    	pXfSetup->TxCnt = pXfSetup->RxCnt = 0;
00001a  2000              MOVS     r0,#0
00001c  60e0              STR      r0,[r4,#0xc]
00001e  6060              STR      r0,[r4,#4]
;;;166    	while (pXfSetup->TxCnt < pXfSetup->Length) {
000020  e00b              B        |L12.58|
                  |L12.34|
;;;167    		/* Wait for TxReady */
;;;168    		while (!(Chip_SPI_GetStatus(pSPI) & SPI_STAT_TXRDY)) {}
000022  bf00              NOP      
                  |L12.36|
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       Chip_SPI_GetStatus
00002a  2102              MOVS     r1,#2
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d0f8              BEQ      |L12.36|
;;;169    
;;;170    		SPI_Send_Data_RxIgnore(pSPI, pXfSetup);
000032  4621              MOV      r1,r4
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       SPI_Send_Data_RxIgnore
                  |L12.58|
00003a  6921              LDR      r1,[r4,#0x10]         ;166
00003c  6860              LDR      r0,[r4,#4]            ;166
00003e  4288              CMP      r0,r1                 ;166
000040  d3ef              BCC      |L12.34|
;;;171    
;;;172    	}
;;;173    
;;;174    	/* Make sure the last frame sent completely*/
;;;175    	while (!(Chip_SPI_GetStatus(pSPI) & SPI_STAT_SSD)) {}
000042  bf00              NOP      
                  |L12.68|
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       Chip_SPI_GetStatus
00004a  2120              MOVS     r1,#0x20
00004c  4008              ANDS     r0,r0,r1
00004e  2800              CMP      r0,#0
000050  d0f8              BEQ      |L12.68|
;;;176    	Chip_SPI_ClearStatus(pSPI, SPI_STAT_CLR_SSD);
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       Chip_SPI_ClearStatus
;;;177    
;;;178    	/* Check overrun error */
;;;179    	if (Chip_SPI_GetStatus(pSPI) & SPI_STAT_CLR_TXUR) {
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       Chip_SPI_GetStatus
00005e  2108              MOVS     r1,#8
000060  4008              ANDS     r0,r0,r1
000062  2800              CMP      r0,#0
000064  d001              BEQ      |L12.106|
;;;180    		return 0;
000066  2000              MOVS     r0,#0
                  |L12.104|
;;;181    	}
;;;182    	return pXfSetup->TxCnt;
;;;183    }
000068  bd70              POP      {r4-r6,pc}
                  |L12.106|
00006a  6860              LDR      r0,[r4,#4]            ;182
00006c  e7fc              B        |L12.104|
;;;184    
                          ENDP


                          AREA ||i.SPI_Receive_Data||, CODE, READONLY, ALIGN=1

                  SPI_Receive_Data PROC
;;;82     
;;;83     STATIC void SPI_Receive_Data(LPC_SPI_T *pSPI,
000000  b510              PUSH     {r4,lr}
;;;84     							 SPI_DATA_SETUP_T *pXfSetup)
;;;85     {
;;;86     	pXfSetup->pRx[pXfSetup->RxCnt] = Chip_SPI_ReceiveFrame(pSPI);
000002  bf00              NOP      
000004  6942              LDR      r2,[r0,#0x14]
000006  b292              UXTH     r2,r2
000008  68cc              LDR      r4,[r1,#0xc]
00000a  0064              LSLS     r4,r4,#1
00000c  688b              LDR      r3,[r1,#8]
00000e  531a              STRH     r2,[r3,r4]
;;;87     	pXfSetup->RxCnt++;
000010  68ca              LDR      r2,[r1,#0xc]
000012  1c52              ADDS     r2,r2,#1
000014  60ca              STR      r2,[r1,#0xc]
;;;88     }
000016  bd10              POP      {r4,pc}
;;;89     
                          ENDP


                          AREA ||i.SPI_Send_Data||, CODE, READONLY, ALIGN=1

                  SPI_Send_Data PROC
;;;58     
;;;59     STATIC void SPI_Send_Data(LPC_SPI_T *pSPI,
000000  b570              PUSH     {r4-r6,lr}
;;;60     						  SPI_DATA_SETUP_T *pXfSetup)
;;;61     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;62     	if (pXfSetup->TxCnt == (pXfSetup->Length - 1)) {
000006  6920              LDR      r0,[r4,#0x10]
000008  1e40              SUBS     r0,r0,#1
00000a  6861              LDR      r1,[r4,#4]
00000c  4281              CMP      r1,r0
00000e  d108              BNE      |L14.34|
;;;63     		Chip_SPI_SendLastFrame(pSPI, pXfSetup->pTx[pXfSetup->TxCnt], pXfSetup->DataSize);
000010  6863              LDR      r3,[r4,#4]
000012  005b              LSLS     r3,r3,#1
000014  6820              LDR      r0,[r4,#0]
000016  5ac1              LDRH     r1,[r0,r3]
000018  7d22              LDRB     r2,[r4,#0x14]
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       Chip_SPI_SendLastFrame
000020  e006              B        |L14.48|
                  |L14.34|
;;;64     	}
;;;65     	else {
;;;66     		Chip_SPI_SendMidFrame(pSPI, pXfSetup->pTx[pXfSetup->TxCnt]);
000022  6862              LDR      r2,[r4,#4]
000024  0052              LSLS     r2,r2,#1
000026  6820              LDR      r0,[r4,#0]
000028  5a81              LDRH     r1,[r0,r2]
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       Chip_SPI_SendMidFrame
                  |L14.48|
;;;67     	}
;;;68     
;;;69     	pXfSetup->TxCnt++;
000030  6860              LDR      r0,[r4,#4]
000032  1c40              ADDS     r0,r0,#1
000034  6060              STR      r0,[r4,#4]
;;;70     }
000036  bd70              POP      {r4-r6,pc}
;;;71     
                          ENDP


                          AREA ||i.SPI_Send_Data_RxIgnore||, CODE, READONLY, ALIGN=1

                  SPI_Send_Data_RxIgnore PROC
;;;45     
;;;46     STATIC void SPI_Send_Data_RxIgnore(LPC_SPI_T *pSPI,
000000  b570              PUSH     {r4-r6,lr}
;;;47     								   SPI_DATA_SETUP_T *pXfSetup)
;;;48     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;49     	if (pXfSetup->TxCnt == (pXfSetup->Length - 1)) {
000006  6920              LDR      r0,[r4,#0x10]
000008  1e40              SUBS     r0,r0,#1
00000a  6861              LDR      r1,[r4,#4]
00000c  4281              CMP      r1,r0
00000e  d10e              BNE      |L15.46|
;;;50     		Chip_SPI_SendLastFrame_RxIgnore(pSPI, pXfSetup->pTx[pXfSetup->TxCnt], pXfSetup->DataSize);
000010  6863              LDR      r3,[r4,#4]
000012  005b              LSLS     r3,r3,#1
000014  6822              LDR      r2,[r4,#0]
000016  5ad0              LDRH     r0,[r2,r3]
000018  7d21              LDRB     r1,[r4,#0x14]
00001a  1e4a              SUBS     r2,r1,#1
00001c  0712              LSLS     r2,r2,#28
00001e  0912              LSRS     r2,r2,#4
000020  2307              MOVS     r3,#7
000022  051b              LSLS     r3,r3,#20
000024  431a              ORRS     r2,r2,r3
000026  4302              ORRS     r2,r2,r0
000028  61aa              STR      r2,[r5,#0x18]
00002a  bf00              NOP      
00002c  e006              B        |L15.60|
                  |L15.46|
;;;51     	}
;;;52     	else {
;;;53     		Chip_SPI_SendMidFrame(pSPI, pXfSetup->pTx[pXfSetup->TxCnt]);
00002e  6862              LDR      r2,[r4,#4]
000030  0052              LSLS     r2,r2,#1
000032  6820              LDR      r0,[r4,#0]
000034  5a81              LDRH     r1,[r0,r2]
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       Chip_SPI_SendMidFrame
                  |L15.60|
;;;54     	}
;;;55     
;;;56     	pXfSetup->TxCnt++;
00003c  6860              LDR      r0,[r4,#4]
00003e  1c40              ADDS     r0,r0,#1
000040  6060              STR      r0,[r4,#4]
;;;57     }
000042  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP


                          AREA ||i.SPI_Send_Dummy||, CODE, READONLY, ALIGN=1

                  SPI_Send_Dummy PROC
;;;71     
;;;72     STATIC void SPI_Send_Dummy(LPC_SPI_T *pSPI,
000000  b570              PUSH     {r4-r6,lr}
;;;73     						   SPI_DATA_SETUP_T *pXfSetup)
;;;74     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;75     	if (pXfSetup->RxCnt == (pXfSetup->Length - 1)) {
000006  6920              LDR      r0,[r4,#0x10]
000008  1e40              SUBS     r0,r0,#1
00000a  68e1              LDR      r1,[r4,#0xc]
00000c  4281              CMP      r1,r0
00000e  d105              BNE      |L16.28|
;;;76     		Chip_SPI_SendLastFrame(pSPI, 0x55, pXfSetup->DataSize);
000010  7d22              LDRB     r2,[r4,#0x14]
000012  2155              MOVS     r1,#0x55
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       Chip_SPI_SendLastFrame
00001a  e003              B        |L16.36|
                  |L16.28|
;;;77     	}
;;;78     	else {
;;;79     		Chip_SPI_SendMidFrame(pSPI, 0x55);
00001c  2155              MOVS     r1,#0x55
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       Chip_SPI_SendMidFrame
                  |L16.36|
;;;80     	}
;;;81     }
000024  bd70              POP      {r4-r6,pc}
;;;82     
                          ENDP


;*** Start embedded assembler ***

#line 1 "lpc_chip_82x\\src\\spi_8xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_spi_8xx_c_6f8a2c72____REV16|
#line 465 ".\\_CMSIS\\v5.20\\Include\\cmsis_armcc.h"
|__asm___9_spi_8xx_c_6f8a2c72____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_spi_8xx_c_6f8a2c72____REVSH|
#line 480
|__asm___9_spi_8xx_c_6f8a2c72____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
