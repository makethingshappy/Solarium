; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\wkt_8xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\wkt_8xx.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\BOKRA485 -I.\_CMSIS\v5.20\Include -I.\lpc_chip_82x\inc -I.\Hardware -IC:\Users\Peter\Documents\Projects\Workspace-Keil\LPC824\BOKRA485\v1.30\BOKRA485\RTE -IC:\Keil_v5\ARM\PACK\Keil\LPC800_DFP\1.10.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DLPC824M201JHI33 -DCORE_M0PLUS --omf_browse=.\objects\wkt_8xx.crf lpc_chip_82x\src\wkt_8xx.c]
                          THUMB

                          AREA ||i.Chip_WKT_GetClockRate||, CODE, READONLY, ALIGN=2

                  Chip_WKT_GetClockRate PROC
;;;60     /* Return approximate rate for the selected clock source */
;;;61     uint32_t Chip_WKT_GetClockRate(LPC_WKT_T *pWKT)
000000  4601              MOV      r1,r0
;;;62     {
;;;63     	if (Chip_WKT_GetClockSource(pWKT) == WKT_CLKSRC_DIVIRC) {
000002  bf00              NOP      
000004  6808              LDR      r0,[r1,#0]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d101              BNE      |L1.18|
;;;64     		/* Approximately 750KHz */
;;;65     		return (750 * 1000);
00000e  4802              LDR      r0,|L1.24|
                  |L1.16|
;;;66     	}
;;;67     	else {
;;;68     		/* Approximately 10KHz */
;;;69     		return (10 * 1000);
;;;70     	}
;;;71     }
000010  4770              BX       lr
                  |L1.18|
000012  4802              LDR      r0,|L1.28|
000014  e7fc              B        |L1.16|
;;;72     
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x000b71b0
                  |L1.28|
                          DCD      0x00002710

                          AREA ||i.Chip_WKT_SetClockSource||, CODE, READONLY, ALIGN=1

                  Chip_WKT_SetClockSource PROC
;;;49     /* Set clock source for WKT */
;;;50     void Chip_WKT_SetClockSource(LPC_WKT_T *pWKT, WKT_CLKSRC_T clkSrc)
000000  2901              CMP      r1,#1
;;;51     {
;;;52     	if (clkSrc == WKT_CLKSRC_10KHZ) {
000002  d104              BNE      |L2.14|
;;;53     		pWKT->CTRL |= WKT_CTRL_CLKSEL;	/* using Low Power clock 10kHz */
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L2.22|
                  |L2.14|
;;;54     	}
;;;55     	else {
;;;56     		pWKT->CTRL &= ~WKT_CTRL_CLKSEL;	/* using Divided IRC clock 750kHz */
00000e  6802              LDR      r2,[r0,#0]
000010  0852              LSRS     r2,r2,#1
000012  0052              LSLS     r2,r2,#1
000014  6002              STR      r2,[r0,#0]
                  |L2.22|
;;;57     	}
;;;58     }
000016  4770              BX       lr
;;;59     
                          ENDP


                          AREA ||i.Chip_WKT_Start||, CODE, READONLY, ALIGN=1

                  Chip_WKT_Start PROC
;;;73     /* Start wake-up timer interrupt, set clock source, set timer interval */
;;;74     void Chip_WKT_Start(LPC_WKT_T *pWKT, WKT_CLKSRC_T clkSrc, uint32_t cntVal)
000000  b570              PUSH     {r4-r6,lr}
;;;75     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;76     	/* Set the WKT clock source */
;;;77     	Chip_WKT_SetClockSource(pWKT, (WKT_CLKSRC_T) clkSrc);
000008  4631              MOV      r1,r6
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       Chip_WKT_SetClockSource
;;;78     
;;;79     	/* Set the WKT counter & start it */
;;;80     	pWKT->COUNT = cntVal;
000010  60e5              STR      r5,[r4,#0xc]
;;;81     }
000012  bd70              POP      {r4-r6,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "lpc_chip_82x\\src\\wkt_8xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_wkt_8xx_c_fcde13a2____REV16|
#line 465 ".\\_CMSIS\\v5.20\\Include\\cmsis_armcc.h"
|__asm___9_wkt_8xx_c_fcde13a2____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_wkt_8xx_c_fcde13a2____REVSH|
#line 480
|__asm___9_wkt_8xx_c_fcde13a2____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
