<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BOKRA485.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BOKRA485.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Feb 05 22:53:02 2020
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Decode_RxCMD &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC0_OVR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0_OVR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC0_OVR_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[1a]">ADC0_SEQA_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[1b]">ADC0_SEQB_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[1c]">ADC0_THCMP_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[17]">BOD_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[15]">CMP_CAPT_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[1e]">DMA0_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from main.o(i.I2C0_IRQHandler) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[11]">I2C1_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[1f]">I2C2_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[20]">I2C3_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[14]">MRT0_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[21]">PIN_INT0_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[22]">PIN_INT1_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[23]">PIN_INT2_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[24]">PIN_INT3_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[25]">PIN_INT4_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[26]">PIN_INT5_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[27]">PIN_INT6_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[28]">PIN_INT7_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[13]">SCT_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[c]">SPI0_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[d]">SPI1_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_lpc824.o(i.SystemInit) referenced from startup_lpc824.o(.text)
 <LI><a href="#[e]">USART0_IRQHandler</a> from main.o(i.USART0_IRQHandler) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[f]">USART1_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[10]">USART2_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[19]">WKT_IRQHandler</a> from startup_lpc824.o(.text) referenced from startup_lpc824.o(RESET)
 <LI><a href="#[2e]">__main</a> from __main.o(!!!main) referenced from startup_lpc824.o(.text)
 <LI><a href="#[2c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2b]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[31]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[32]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[33]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[34]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[36]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[be]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[38]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[30]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[d7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Decode_RxCMD &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[db]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_OVR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_OVR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0_SEQA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0_SEQB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CMP_CAPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MRT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WKT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc824.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
</UL>

<P><STRONG><a name="[dd]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
</UL>

<P><STRONG><a name="[58]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[59]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[46]"></a>strtok</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
</UL>

<P><STRONG><a name="[9f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[de]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[4c]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4f]"></a>strtoul</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
</UL>

<P><STRONG><a name="[9e]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>

<P><STRONG><a name="[df]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[54]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[e0]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTLFORate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[e8]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[45]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[47]"></a>__strtok_internal</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[4a]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[37]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[5a]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[5c]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[5b]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ea]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>App_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.App_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Board_Clock_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, brd_bokra_lpc824_lite.o(i.Board_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_Clock_Init &rArr; SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSystemPLLSource
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetPLLBypass
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetMainClockSource
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PowerUp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[67]"></a>Board_I2C_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, brd_bokra_lpc824_lite.o(i.Board_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Board_I2C_Init &rArr; Chip_I2CM_SetBusSpeed &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[6c]"></a>Board_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, brd_bokra_lpc824_lite.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Board_Init &rArr; Board_UART_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>Board_UART_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, brd_bokra_lpc824_lite.o(i.Board_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Board_UART_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[6e]"></a>Chip_Clock_GetMainClockRate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetMainClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[69]"></a>Chip_Clock_GetSystemClockRate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetSystemClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[7e]"></a>Chip_Clock_GetSystemPLLInClockRate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_GetSystemPLLInClockRate))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[80]"></a>Chip_Clock_GetSystemPLLOutClockRate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetSystemPLLOutClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetSystemPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[82]"></a>Chip_Clock_GetUSARTNBaseClockRate</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, clock_8xx.o(i.Chip_Clock_GetUSARTNBaseClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chip_Clock_GetUSARTNBaseClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[7f]"></a>Chip_Clock_GetWDTOSCRate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetWDTOSCRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTLFORate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[65]"></a>Chip_Clock_SetMainClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_SetMainClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[62]"></a>Chip_Clock_SetPLLBypass</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_SetPLLBypass))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[64]"></a>Chip_Clock_SetSystemPLLSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_SetSystemPLLSource))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[7c]"></a>Chip_Clock_SetUSARTNBaseClockRate</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, clock_8xx.o(i.Chip_Clock_SetUSARTNBaseClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_SetUSARTFRGDivider
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[71]"></a>Chip_GPIO_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_8xx.o(i.Chip_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[6b]"></a>Chip_I2CM_SetBusSpeed</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, i2cm_8xx.o(i.Chip_I2CM_SetBusSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_I2CM_SetBusSpeed &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetDutyCycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[88]"></a>Chip_I2CM_Xfer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, i2cm_8xx.o(i.Chip_I2CM_Xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_I2CM_Xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_WriteByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[8b]"></a>Chip_I2CM_XferHandler</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, i2cm_8xx.o(i.Chip_I2CM_XferHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_I2CM_XferHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_DisableInt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_WriteByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SendStop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>Chip_I2C_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, i2c_common_8xx.o(i.Chip_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetResetID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetClockID
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[77]"></a>Chip_IOCON_PinSetI2CMode</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, iocon_8xx.o(i.Chip_IOCON_PinSetI2CMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_IOCON_PinSetI2CMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[75]"></a>Chip_IOCON_PinSetMode</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, iocon_8xx.o(i.Chip_IOCON_PinSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_IOCON_PinSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[79]"></a>Chip_IOCON_PinSetOpenDrainMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iocon_8xx.o(i.Chip_IOCON_PinSetOpenDrainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_IOCON_PinSetOpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[76]"></a>Chip_SWM_FixedPinEnable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, swm_8xx.o(i.Chip_SWM_FixedPinEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_SWM_FixedPinEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[74]"></a>Chip_SWM_MovablePinAssign</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, swm_8xx.o(i.Chip_SWM_MovablePinAssign))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Chip_SWM_MovablePinAssign
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[63]"></a>Chip_SYSCTL_PowerUp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, syscon_8xx.o(i.Chip_SYSCTL_PowerUp))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[91]"></a>Chip_UART_IRQRBHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart_8xx.o(i.Chip_UART_IRQRBHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IntDisable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>Chip_UART_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart_8xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUARTClockID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[95]"></a>Chip_UART_RXIntHandlerRB</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_8xx.o(i.Chip_UART_RXIntHandlerRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_UART_RXIntHandlerRB &rArr; RingBuffer_Insert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[99]"></a>Chip_UART_SendRB</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, uart_8xx.o(i.Chip_UART_SendRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Chip_UART_SendRB &rArr; RingBuffer_InsertMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IntDisable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
</UL>

<P><STRONG><a name="[7d]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, uart_8xx.o(i.Chip_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[93]"></a>Chip_UART_TXIntHandlerRB</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_8xx.o(i.Chip_UART_TXIntHandlerRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_UART_TXIntHandlerRB &rArr; RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[9d]"></a>Decode_RxCMD</STRONG> (Thumb, 1152 bytes, Stack size 64 bytes, main.o(i.Decode_RxCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Decode_RxCMD &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_IRQHandler &rArr; Chip_I2CM_XferHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>MCP23008_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.MCP23008_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCP23008_Init &rArr; MCP23008_Write8 &rArr; StopWatch_DelayTicks &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>MCP23008_Read8</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.MCP23008_Read8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCP23008_Read8 &rArr; StopWatch_DelayTicks &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Xfer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForI2cXferComplete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayTicks
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_EnableInt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_DisableInt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Inputs
</UL>

<P><STRONG><a name="[a1]"></a>MCP23008_Write8</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.MCP23008_Write8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCP23008_Write8 &rArr; StopWatch_DelayTicks &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Xfer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForI2cXferComplete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayTicks
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_EnableInt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_DisableInt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_Outputs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Init
</UL>

<P><STRONG><a name="[a9]"></a>Reload_Inputs</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.Reload_Inputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Reload_Inputs &rArr; MCP23008_Read8 &rArr; StopWatch_DelayTicks &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>Rewrite_Outputs</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.Rewrite_Outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Rewrite_Outputs &rArr; MCP23008_Write8 &rArr; StopWatch_DelayTicks &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>RingBuffer_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ring_buffer.o(i.RingBuffer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>RingBuffer_Insert</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuffer_Insert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
</UL>

<P><STRONG><a name="[9a]"></a>RingBuffer_InsertMult</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ring_buffer.o(i.RingBuffer_InsertMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RingBuffer_InsertMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetCount
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
</UL>

<P><STRONG><a name="[9c]"></a>RingBuffer_Pop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>StopWatch_Init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, stopwatch_8xx.o(i.StopWatch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StopWatch_Init &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>StopWatch_MsToTicks</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stopwatch_8xx.o(i.StopWatch_MsToTicks))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayMs
</UL>

<P><STRONG><a name="[b0]"></a>StopWatch_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stopwatch_8xx.o(i.StopWatch_Start))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Elapsed
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayTicks
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayMs
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, system_lpc824.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetPLLFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLInClkRate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_lpc824.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>USART0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART0_IRQHandler &rArr; Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WritePortBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc824.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2cm_8xx.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[4d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 882 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; Decode_RxCMD &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_Outputs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Inputs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_RxCMD
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayMs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WritePortBit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[81]"></a>Chip_Clock_GetPLLFreq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_GetPLLFreq))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
</UL>

<P><STRONG><a name="[85]"></a>Chip_Clock_GetWDTLFORate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock_8xx.o(i.Chip_Clock_GetWDTLFORate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
</UL>

<P><STRONG><a name="[86]"></a>Chip_SYSCTL_SetUSARTFRGDivider</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_SYSCTL_SetUSARTFRGDivider))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
</UL>

<P><STRONG><a name="[8f]"></a>I2C_GetClockID</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c_common_8xx.o(i.I2C_GetClockID))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
</UL>

<P><STRONG><a name="[90]"></a>I2C_GetResetID</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c_common_8xx.o(i.I2C_GetResetID))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
</UL>

<P><STRONG><a name="[89]"></a>Chip_I2CM_ClearStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2cm_8xx.o(i.Chip_I2CM_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Xfer
</UL>

<P><STRONG><a name="[8e]"></a>Chip_I2CM_SendStop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cm_8xx.o(i.Chip_I2CM_SendStop))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
</UL>

<P><STRONG><a name="[87]"></a>Chip_I2CM_SetDutyCycle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2cm_8xx.o(i.Chip_I2CM_SetDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_I2CM_SetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
</UL>

<P><STRONG><a name="[8a]"></a>Chip_I2CM_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2cm_8xx.o(i.Chip_I2CM_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Xfer
</UL>

<P><STRONG><a name="[8c]"></a>Chip_I2C_DisableInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2cm_8xx.o(i.Chip_I2C_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
</UL>

<P><STRONG><a name="[ac]"></a>RingBuffer_GetCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
</UL>

<P><STRONG><a name="[ad]"></a>RingBuffer_IsEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>

<P><STRONG><a name="[ab]"></a>RingBuffer_IsFull</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ring_buffer.o(i.RingBuffer_IsFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer_IsFull
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>

<P><STRONG><a name="[97]"></a>Chip_SYSCTL_PeriphReset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_SYSCTL_PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[92]"></a>Chip_UART_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_UART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[94]"></a>Chip_UART_IntDisable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_UART_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[9b]"></a>Chip_UART_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
</UL>

<P><STRONG><a name="[96]"></a>getUARTClockID</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart_8xx.o(i.getUARTClockID))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[b3]"></a>CLOCK_GetSystemPLLInClkRate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_lpc824.o(i.CLOCK_GetSystemPLLInClkRate))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[b4]"></a>Clock_GetPLLFreq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_lpc824.o(i.Clock_GetPLLFreq))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[6d]"></a>Board_MCU_Pin_Init</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, brd_bokra_lpc824_lite.o(i.Board_MCU_Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Board_MCU_Pin_Init &rArr; Chip_SWM_MovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinSetOpenDrainMode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinSetMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinSetI2CMode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SWM_MovablePinAssign
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SWM_FixedPinEnable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[7a]"></a>Chip_Clock_DisablePeriphClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, brd_bokra_lpc824_lite.o(i.Chip_Clock_DisablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[72]"></a>Chip_Clock_EnablePeriphClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, brd_bokra_lpc824_lite.o(i.Chip_Clock_EnablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[78]"></a>Chip_GPIO_SetPinDIR</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, brd_bokra_lpc824_lite.o(i.Chip_GPIO_SetPinDIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_GPIO_SetPinDIR
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[73]"></a>Chip_GPIO_SetPinState</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, brd_bokra_lpc824_lite.o(i.Chip_GPIO_SetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MCU_Pin_Init
</UL>

<P><STRONG><a name="[6f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, brd_bokra_lpc824_lite.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[b5]"></a>Chip_GPIO_WritePortBit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.Chip_GPIO_WritePortBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_WritePortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>Chip_I2CM_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.Chip_I2CM_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[a4]"></a>Chip_I2CM_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.Chip_I2CM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[a8]"></a>Chip_I2C_DisableInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Chip_I2C_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[a5]"></a>Chip_I2C_EnableInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Chip_I2C_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[ae]"></a>StopWatch_DelayMs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.StopWatch_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopWatch_DelayMs &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_MsToTicks
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Elapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>StopWatch_DelayTicks</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.StopWatch_DelayTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopWatch_DelayTicks &rArr; StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Elapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[b1]"></a>StopWatch_Elapsed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.StopWatch_Elapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopWatch_Elapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayTicks
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopWatch_DelayMs
</UL>

<P><STRONG><a name="[a6]"></a>WaitForI2cXferComplete</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.WaitForI2cXferComplete))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Write8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP23008_Read8
</UL>

<P><STRONG><a name="[2d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[48]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[49]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
